{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cp2k-basis \u00a4 A library to parse CP2K basis sets and GTH pseudopotentials, which also comes with a webserver to find out and select a basis set and its matching pseudopotential for your CP2K calculations, similar to the basis set exchange . More info are provided there . Info Check out the live version, available at https://cp2k-basis.pierrebeaujean.net .","title":"Home"},{"location":"#cp2k-basis","text":"A library to parse CP2K basis sets and GTH pseudopotentials, which also comes with a webserver to find out and select a basis set and its matching pseudopotential for your CP2K calculations, similar to the basis set exchange . More info are provided there . Info Check out the live version, available at https://cp2k-basis.pierrebeaujean.net .","title":"cp2k-basis"},{"location":"about/","text":"About this project. \u00a4 TL;DR: This project, develloped by Pierre Beaujean , provides an easy way to select matching basis sets and GTH pseudopotentials for your CP2K calculation. For the rest, go to the basis set exchange \ud83d\ude03 What? \u00a4 Info If you are not familiar with the concept of basis set and pseudopotentials, check out this introduction . Why CP2K? \u00a4 CP2K is a quantum chemistry program that can perform atomistic simulations. It is especially known for mixing Gaussian and plane wave approaches, which are useful to perform ab initio molecular dynamics, among others . Why this if there is the basis set exchange? \u00a4 The basis set exchange (BSE), developed by MolSSI is a trustworthy provider of basis sets and effective core potentials (ECP) since a long time ago. It even provides an output for CP2K. In fact, this project has no intention of replacing the BSE, and users should happily continue to use it to fetch ECP and all-electrons basis sets. However, CP2K calculations can also use a pair of matching GTH potentials and corresponding basis sets , which are not available on the BSE. This is actually one of the first thing you learn when you try to use the CP2K program . This is where this project is useful, by allowing the users to look through the library of available basis sets and pseudopotentials with a web interface similar to the BSE . Behind the scene, it also provides a library to read, write and store CP2K basis sets and potentials. Alternatives? \u00a4 The official cp2k-data repository , which might contain more up to date version of GTH potentials. This webpage , which provide an easy way to explore the previous repository. Other tools (related to input and output) are also listed in the CP2K documentation . How? \u00a4 For the moment, the basis sets and GTH pseudopotentials are taken from the /data directory of the CP2K repository . This project is developed using Python 3 , numpy and h5py (for the storage). The webserver is powered by Flask 2 . This documentation is built using mkdocs . Who? \u00a4 My name is Pierre Beaujean , and I'm a Ph.D. in quantum chemistry from the University of Namur (Belgium). I'm the main (and only) developer of this project, used in our lab. I use CP2K in the frame of my post-doctoral research, and I developed this project for all the reasons listed above. I'm happy to welcome your contributions !","title":"About"},{"location":"about/#about-this-project","text":"TL;DR: This project, develloped by Pierre Beaujean , provides an easy way to select matching basis sets and GTH pseudopotentials for your CP2K calculation. For the rest, go to the basis set exchange \ud83d\ude03","title":"About this project."},{"location":"about/#what","text":"Info If you are not familiar with the concept of basis set and pseudopotentials, check out this introduction .","title":"What?"},{"location":"about/#why-cp2k","text":"CP2K is a quantum chemistry program that can perform atomistic simulations. It is especially known for mixing Gaussian and plane wave approaches, which are useful to perform ab initio molecular dynamics, among others .","title":"Why CP2K?"},{"location":"about/#why-this-if-there-is-the-basis-set-exchange","text":"The basis set exchange (BSE), developed by MolSSI is a trustworthy provider of basis sets and effective core potentials (ECP) since a long time ago. It even provides an output for CP2K. In fact, this project has no intention of replacing the BSE, and users should happily continue to use it to fetch ECP and all-electrons basis sets. However, CP2K calculations can also use a pair of matching GTH potentials and corresponding basis sets , which are not available on the BSE. This is actually one of the first thing you learn when you try to use the CP2K program . This is where this project is useful, by allowing the users to look through the library of available basis sets and pseudopotentials with a web interface similar to the BSE . Behind the scene, it also provides a library to read, write and store CP2K basis sets and potentials.","title":"Why this if there is the basis set exchange?"},{"location":"about/#alternatives","text":"The official cp2k-data repository , which might contain more up to date version of GTH potentials. This webpage , which provide an easy way to explore the previous repository. Other tools (related to input and output) are also listed in the CP2K documentation .","title":"Alternatives?"},{"location":"about/#how","text":"For the moment, the basis sets and GTH pseudopotentials are taken from the /data directory of the CP2K repository . This project is developed using Python 3 , numpy and h5py (for the storage). The webserver is powered by Flask 2 . This documentation is built using mkdocs .","title":"How?"},{"location":"about/#who","text":"My name is Pierre Beaujean , and I'm a Ph.D. in quantum chemistry from the University of Namur (Belgium). I'm the main (and only) developer of this project, used in our lab. I use CP2K in the frame of my post-doctoral research, and I developed this project for all the reasons listed above. I'm happy to welcome your contributions !","title":"Who?"},{"location":"api/","text":"REST API reference \u00a4 Info A public version is available at https://cp2k-basis.pierrebeaujean.net/api/ . Preamble \u00a4 Request \u00a4 This API can be used to retrieve two types ( <type> ) of data, either basis sets ( basis ) or pseudopotentials ( pseudopotentials ). Each of them has a name ( <name> ). Options are added as query string: /api/example?option1=value&option2=value . All routes are addressed by GET requests. On the elements option \u00a4 Every time the option elements can be used, you can use a list of comma separated atomic symbols, e.g., C,H,N,O , but also ranges, e.g., H,C-O , and Z numbers can be used instead of symbols, e,g., H,6-8 . Elements are limited to Z \u2264 92, i.e., hydrogen to uranium. If you want to perform calculations outside this range, you probably have other problems on your plate than finding a basis set ;) Response format \u00a4 The response is in JSON, and always contains two main fields: { \"query\" : { \"type\" : \"TYPE\" , (...) }, \"result\" : { (...) } } query contains the request, to which result is the answer. In the following, fields will be detailed using the syntax for object attributes in JS, e.g., query.type . Routes \u00a4 /api/data \u00a4 Get, for basis sets and pseudopotentials, which elements are defined, and for each element, which basis set/pseudopotentials are defined. There is no option. Output: Field Type Description query.type string Always ALL result.basis_sets dictionary Contains three fields: build_date , which give the date at which the library was built, per_name , which lists elements available for a given basis set, and per_elements , which lists all basis set names available for a given element. result.pseudopotentials dictionary Contains three fields: build_date , which give the date at which the library was built, per_name , which lists elements available for a given pseudopotential, and per_elements , which lists all pseudopotential names available for a given element. Example : curl https://cp2k-basis.pierrebeaujean.net/api/data { \"query\" : { \"type\" : \"ALL\" }, \"result\" : { \"basis_sets\" : { \"per_element\" : { \"Ag\" : [ \"DZVP-MOLOPT-SR-GTH\" , \"SZV-MOLOPT-SR-GTH\" ], (...) }, \"per_name\" : { \"DZV-GTH\" : [ \"H\" , \"He\" ], (...) } }, \"pseudopotentials\" : { \"per_element\" : { \"Ag\" : [ \"GTH-BLYP\" , \"GTH-LDA\" , \"GTH-PADE\" , \"GTH-PBE\" ], (...) }, \"per_name\" : { \"GTH-BLYP\" : [ \"Ag\" , \"Al\" , (...) ], (...) } } } } /api/names \u00a4 List all available basis set and pseudopotential names available, eventually for a set of elements. Options: Option Argument Description elements String Restrict the output to a subset of elements. Output: Field Type Description query.type string Always ALL query.elements list of string Value of the elements option, if provided result.basis_sets list of string List of basis set names available result.pseudopotentials list of string List of pseudopotential names available Example : curl https://cp2k-basis.pierrebeaujean.net/api/names?elements = Ti { \"query\" : { \"elements\" : [ \"Ti\" ], \"type\" : \"ALL\" }, \"result\" : { \"basis_sets\" : [ \"DZVP-MOLOPT-SR-GTH\" , \"SZV-MOLOPT-SR-GTH\" ], \"pseudopotentials\" : [ \"GTH-BLYP\" , \"GTH-BP\" , \"GTH-LDA\" , \"GTH-PADE\" , \"GTH-PBE\" ] } } /api/<type>/<name>/data \u00a4 Obtain data in the CP2K format. Options: Option Argument Description elements String Restrict the output to a subset of elements. If some elements are not defined for this basis set/pseudopotential, a 404 is raised. header Boolean Add an header to result.data (default is true) Output: Field Type Description query.type string BASIS_SET or PSEUDOPOTENTIAL query.name string The name you requested query.elements list of string Value of the elements option, if provided result.data string The resulting basis set or pseudopotential, in CP2K format result.elements list of string Elements for which there is data (matches the option elements if set) result.variants dictionary For each element, dictionary containing all variants and the corresponding name to be used for such variant result.metadata dictionary Dictionary of metadata about this pseudopotential/basis set. See below for content. Example : curl https://cp2k-basis.pierrebeaujean.net/api/basis/SZV-MOLOPT-SR-GTH/data?elements = Rh { \"query\" : { \"elements\" : [ \"Rh\" ], \"name\" : \"SZV-MOLOPT-SR-GTH\" , \"type\" : \"BASIS_SET\" }, \"result\" : { \"data\" : \"# URL: http://127.0.0.1:5000/api/basis/SZV-MOLOPT-SR-GTH/data?elements=Rh\\n# DATETIME: 02/12/2022 @ 17:18\\n# ---\\n# Rh [12s6p6d|2s1p1d]\\nRh SZV-MOLOPT-SR-GTH SZV-MOLOPT-SR-GTH-q17\\n1\\n2 0 2 6 2 1 1\\n 3.157817444361 0.760084070950 0.239207051701 -0.336193318541 -0.176446839307\\n 2.683291075925 -0.255650224037 -0.091067207483 0.373953992584 0.261743358411\\n 1.140786095845 -1.025626679377 -0.520689753906 0.300684698668 0.174717739794\\n 0.492081007160 -0.234415477939 -0.274976137245 0.141457244144 0.188746290944\\n 0.192543904978 0.046321838032 0.534686741279 0.007751787318 0.112894420897\\n 0.066486620394 0.135748106274 0.896548625743 0.000117823467 0.021703317232\\n# Rh [6s6p6d|1s1p1d]\\nRh SZV-MOLOPT-SR-GTH-q9\\n1\\n2 0 2 6 1 1 1\\n 3.902721449032 0.016652865171 -0.008699428728 -0.112417659954\\n 1.999830271997 -0.133395648426 0.046572987907 0.348017742874\\n 0.879887627395 0.373099930807 -0.153463590375 0.381775351795\\n 0.363794442257 0.298777744612 -0.052550610965 0.335875585916\\n 0.140096726529 -0.924610879301 0.949493319446 0.146687236468\\n 0.042562039477 -0.455102584336 0.423881871378 0.013082339937\\n\" , \"elements\" : [ \"Rh\" ], \"metadata\" : { \"description\" : \"A single zeta valence MOLOPT basis set, for solids (short-range, less diffuse basis functions) and GTH potentials.\" , \"references\" : [ \"https://dx.doi.org/10.1063/1.2770708\" ], \"source\" : \"https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/BASIS_MOLOPT\" }, \"variants\" : { \"Rh\" : { \"q17\" : \"SZV-MOLOPT-SR-GTH-q17\" , \"q9\" : \"SZV-MOLOPT-SR-GTH-q9\" } } } } /api/<type>/<name>/metadata \u00a4 Obtain metadata about a basis set or pseudopotential. There is no option. Output: Field Type Description query.type string BASIS_SET or PSEUDOPOTENTIAL query.name string The name you requested result.elements list of string Elements for which the basis set/pseudopotential are defined result.description string Small description. result.references list of string List of URL to articles or repositories result.source string URL to the file which was used to create the data Example : curl https://cp2k-basis.pierrebeaujean.net/api/pseudopotentials/GTH-BLYP/metadata { \"query\" : { \"name\" : \"GTH-BLYP\" , \"type\" : \"PSEUDOPOTENTIAL\" }, \"result\" : { \"description\" : \"GTH potentials for BLYP.\" , \"elements\" : [ \"Ag\" , \"Al\" , (...) ], \"references\" : [ \"https://dx.doi.org/10.1103/PhysRevB.54.1703\" , \"https://dx.doi.org/10.1103/PhysRevB.58.3641\" , \"https://dx.doi.org/10.1007/s00214-005-0655-y\" , \"https://github.com/cp2k/cp2k-data\" ], \"source\" : \"https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/GTH_POTENTIALS\" } }","title":"REST API reference"},{"location":"api/#rest-api-reference","text":"Info A public version is available at https://cp2k-basis.pierrebeaujean.net/api/ .","title":"REST API reference"},{"location":"api/#preamble","text":"","title":"Preamble"},{"location":"api/#request","text":"This API can be used to retrieve two types ( <type> ) of data, either basis sets ( basis ) or pseudopotentials ( pseudopotentials ). Each of them has a name ( <name> ). Options are added as query string: /api/example?option1=value&option2=value . All routes are addressed by GET requests.","title":"Request"},{"location":"api/#on-the-elements-option","text":"Every time the option elements can be used, you can use a list of comma separated atomic symbols, e.g., C,H,N,O , but also ranges, e.g., H,C-O , and Z numbers can be used instead of symbols, e,g., H,6-8 . Elements are limited to Z \u2264 92, i.e., hydrogen to uranium. If you want to perform calculations outside this range, you probably have other problems on your plate than finding a basis set ;)","title":"On the elements option"},{"location":"api/#response-format","text":"The response is in JSON, and always contains two main fields: { \"query\" : { \"type\" : \"TYPE\" , (...) }, \"result\" : { (...) } } query contains the request, to which result is the answer. In the following, fields will be detailed using the syntax for object attributes in JS, e.g., query.type .","title":"Response format"},{"location":"api/#routes","text":"","title":"Routes"},{"location":"api/#apidata","text":"Get, for basis sets and pseudopotentials, which elements are defined, and for each element, which basis set/pseudopotentials are defined. There is no option. Output: Field Type Description query.type string Always ALL result.basis_sets dictionary Contains three fields: build_date , which give the date at which the library was built, per_name , which lists elements available for a given basis set, and per_elements , which lists all basis set names available for a given element. result.pseudopotentials dictionary Contains three fields: build_date , which give the date at which the library was built, per_name , which lists elements available for a given pseudopotential, and per_elements , which lists all pseudopotential names available for a given element. Example : curl https://cp2k-basis.pierrebeaujean.net/api/data { \"query\" : { \"type\" : \"ALL\" }, \"result\" : { \"basis_sets\" : { \"per_element\" : { \"Ag\" : [ \"DZVP-MOLOPT-SR-GTH\" , \"SZV-MOLOPT-SR-GTH\" ], (...) }, \"per_name\" : { \"DZV-GTH\" : [ \"H\" , \"He\" ], (...) } }, \"pseudopotentials\" : { \"per_element\" : { \"Ag\" : [ \"GTH-BLYP\" , \"GTH-LDA\" , \"GTH-PADE\" , \"GTH-PBE\" ], (...) }, \"per_name\" : { \"GTH-BLYP\" : [ \"Ag\" , \"Al\" , (...) ], (...) } } } }","title":"/api/data"},{"location":"api/#apinames","text":"List all available basis set and pseudopotential names available, eventually for a set of elements. Options: Option Argument Description elements String Restrict the output to a subset of elements. Output: Field Type Description query.type string Always ALL query.elements list of string Value of the elements option, if provided result.basis_sets list of string List of basis set names available result.pseudopotentials list of string List of pseudopotential names available Example : curl https://cp2k-basis.pierrebeaujean.net/api/names?elements = Ti { \"query\" : { \"elements\" : [ \"Ti\" ], \"type\" : \"ALL\" }, \"result\" : { \"basis_sets\" : [ \"DZVP-MOLOPT-SR-GTH\" , \"SZV-MOLOPT-SR-GTH\" ], \"pseudopotentials\" : [ \"GTH-BLYP\" , \"GTH-BP\" , \"GTH-LDA\" , \"GTH-PADE\" , \"GTH-PBE\" ] } }","title":"/api/names"},{"location":"api/#apitypenamedata","text":"Obtain data in the CP2K format. Options: Option Argument Description elements String Restrict the output to a subset of elements. If some elements are not defined for this basis set/pseudopotential, a 404 is raised. header Boolean Add an header to result.data (default is true) Output: Field Type Description query.type string BASIS_SET or PSEUDOPOTENTIAL query.name string The name you requested query.elements list of string Value of the elements option, if provided result.data string The resulting basis set or pseudopotential, in CP2K format result.elements list of string Elements for which there is data (matches the option elements if set) result.variants dictionary For each element, dictionary containing all variants and the corresponding name to be used for such variant result.metadata dictionary Dictionary of metadata about this pseudopotential/basis set. See below for content. Example : curl https://cp2k-basis.pierrebeaujean.net/api/basis/SZV-MOLOPT-SR-GTH/data?elements = Rh { \"query\" : { \"elements\" : [ \"Rh\" ], \"name\" : \"SZV-MOLOPT-SR-GTH\" , \"type\" : \"BASIS_SET\" }, \"result\" : { \"data\" : \"# URL: http://127.0.0.1:5000/api/basis/SZV-MOLOPT-SR-GTH/data?elements=Rh\\n# DATETIME: 02/12/2022 @ 17:18\\n# ---\\n# Rh [12s6p6d|2s1p1d]\\nRh SZV-MOLOPT-SR-GTH SZV-MOLOPT-SR-GTH-q17\\n1\\n2 0 2 6 2 1 1\\n 3.157817444361 0.760084070950 0.239207051701 -0.336193318541 -0.176446839307\\n 2.683291075925 -0.255650224037 -0.091067207483 0.373953992584 0.261743358411\\n 1.140786095845 -1.025626679377 -0.520689753906 0.300684698668 0.174717739794\\n 0.492081007160 -0.234415477939 -0.274976137245 0.141457244144 0.188746290944\\n 0.192543904978 0.046321838032 0.534686741279 0.007751787318 0.112894420897\\n 0.066486620394 0.135748106274 0.896548625743 0.000117823467 0.021703317232\\n# Rh [6s6p6d|1s1p1d]\\nRh SZV-MOLOPT-SR-GTH-q9\\n1\\n2 0 2 6 1 1 1\\n 3.902721449032 0.016652865171 -0.008699428728 -0.112417659954\\n 1.999830271997 -0.133395648426 0.046572987907 0.348017742874\\n 0.879887627395 0.373099930807 -0.153463590375 0.381775351795\\n 0.363794442257 0.298777744612 -0.052550610965 0.335875585916\\n 0.140096726529 -0.924610879301 0.949493319446 0.146687236468\\n 0.042562039477 -0.455102584336 0.423881871378 0.013082339937\\n\" , \"elements\" : [ \"Rh\" ], \"metadata\" : { \"description\" : \"A single zeta valence MOLOPT basis set, for solids (short-range, less diffuse basis functions) and GTH potentials.\" , \"references\" : [ \"https://dx.doi.org/10.1063/1.2770708\" ], \"source\" : \"https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/BASIS_MOLOPT\" }, \"variants\" : { \"Rh\" : { \"q17\" : \"SZV-MOLOPT-SR-GTH-q17\" , \"q9\" : \"SZV-MOLOPT-SR-GTH-q9\" } } } }","title":"/api/&lt;type&gt;/&lt;name&gt;/data"},{"location":"api/#apitypenamemetadata","text":"Obtain metadata about a basis set or pseudopotential. There is no option. Output: Field Type Description query.type string BASIS_SET or PSEUDOPOTENTIAL query.name string The name you requested result.elements list of string Elements for which the basis set/pseudopotential are defined result.description string Small description. result.references list of string List of URL to articles or repositories result.source string URL to the file which was used to create the data Example : curl https://cp2k-basis.pierrebeaujean.net/api/pseudopotentials/GTH-BLYP/metadata { \"query\" : { \"name\" : \"GTH-BLYP\" , \"type\" : \"PSEUDOPOTENTIAL\" }, \"result\" : { \"description\" : \"GTH potentials for BLYP.\" , \"elements\" : [ \"Ag\" , \"Al\" , (...) ], \"references\" : [ \"https://dx.doi.org/10.1103/PhysRevB.54.1703\" , \"https://dx.doi.org/10.1103/PhysRevB.58.3641\" , \"https://dx.doi.org/10.1007/s00214-005-0655-y\" , \"https://github.com/cp2k/cp2k-data\" ], \"source\" : \"https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/GTH_POTENTIALS\" } }","title":"/api/&lt;type&gt;/&lt;name&gt;/metadata"},{"location":"basis_sets_and_pseudos/","text":"On basis sets and GTH pseudopotentials in CP2K \u00a4 Basis sets \u00a4 Solving the Schr\u00f6dinger equation generally resort to the use of the LCAO ( linear combination of atomic orbitals ) approximation. For computational reasons, while STO (slater-type orbitals, \\(\\propto e^{r}\\) ) should be used, GTO (gaussian type orbitals) are preferred. Basis functions \u00a4 The expression of a spherical primitive GTO centered in \\(\\mathbf A\\) is given by: \\[g_{u,\\ell m}(\\mathbf A, \\mathbf r) = |\\mathbf r|^\\ell\\,e^{-\\alpha_u (\\mathbf r-\\mathbf A)^2}\\,Y_{\\ell m}(\\mathbf r - \\mathbf A),\\] where \\(\\alpha_u\\) is the exponent and \\(Y_{\\ell m}\\) is a spherical harmonic ( \\(\\ell\\) is the angular momentum and \\(m\\in[-\\ell,\\ell]\\) ). Generally, an atomic orbital \\(\\psi_{\\ell m}\\) , also called a basis function , is given by a set of contracted primitives: \\[\\psi_{\\ell m} (\\mathbf A, \\mathbf r) = \\sum_u d_u\\,g_{u,\\ell m}(\\mathbf A, \\mathbf r),\\] where \\(d_u\\) form a set of contraction coefficients . In CP2K (as in other quantum chemistry programs), basis sets are defined by a set of contractions, each for a given shell \\(\\ell\\) (s-type, p-type, d-type, etc) containing primitives (so a list of exponents and their corresponding contraction coefficients). The same coefficients and exponents are used for each atomic orbital in a shell (i.e., each possible value of \\(m\\) ). But basis function can be grouped! Some basis functions (even with different \\(\\ell\\) ) may be grouped to share the same exponent. This is the case, e.g., in the (in)famous STO-3G (3 gaussians for each basis function) in which so-called \"SP\" basis functions are found, defined by using a common exponent but different contraction coefficient for each of the 3 gaussians defining the actual s-type and p-type basis function. MOLOPT basis sets (see below) are built on this principle. Improving the basis set by adding more basis functions \u00a4 Multiple- \\(\\zeta\\) basis sets use \\(\\zeta\\) basis functions for each atomic orbitals in the atom. For example, double- \\(\\zeta\\) basis sets use two basis function for each atomic orbital (e.g., a total of 10 basis function for the carbon). They may be grouped to share the same exponent, or not. On top of that, two other kind of basis function might be added: polarization functions , which have a larger angular momentum than those of the ground state of the atom (e.g., d-type basis functions for the carbon), and diffuse functions , which have very small exponents (corresponding to very \"large\" gaussians). Thus, the number of basis function for a given atom is very different from one basis set to the other. Note One way to ease the communication is to report, for each shell, the number of primitives (uncontracted set) and the number of basis functions (contracted set) in the form (uncontracted set) , [contracted set] . For example, in a double-zeta basis set defined by 3 gaussian per basis function, the result would be (12s,6p) and [3s,2p] . The form [12s6p|3s2p] is also found, and reported by the webserver. Pseudopotentials \u00a4 See https://journals.aps.org/prb/abstract/10.1103/PhysRevB.54.1703 , https://journals.aps.org/prb/abstract/10.1103/PhysRevB.58.3641 , http://www.physics.metu.edu.tr/~hande/teaching/741-lectures/lecture-08.pdf To be continued, but: Introduce both basis sets and pseudos; Present the naming rule(s) of basis sets and pseudopontials; Try to indicate which basis set goes with witch potential. Parser?","title":"On basis sets and GTH pseudopotentials in CP2K"},{"location":"basis_sets_and_pseudos/#on-basis-sets-and-gth-pseudopotentials-in-cp2k","text":"","title":"On basis sets and GTH pseudopotentials in CP2K"},{"location":"basis_sets_and_pseudos/#basis-sets","text":"Solving the Schr\u00f6dinger equation generally resort to the use of the LCAO ( linear combination of atomic orbitals ) approximation. For computational reasons, while STO (slater-type orbitals, \\(\\propto e^{r}\\) ) should be used, GTO (gaussian type orbitals) are preferred.","title":"Basis sets"},{"location":"basis_sets_and_pseudos/#basis-functions","text":"The expression of a spherical primitive GTO centered in \\(\\mathbf A\\) is given by: \\[g_{u,\\ell m}(\\mathbf A, \\mathbf r) = |\\mathbf r|^\\ell\\,e^{-\\alpha_u (\\mathbf r-\\mathbf A)^2}\\,Y_{\\ell m}(\\mathbf r - \\mathbf A),\\] where \\(\\alpha_u\\) is the exponent and \\(Y_{\\ell m}\\) is a spherical harmonic ( \\(\\ell\\) is the angular momentum and \\(m\\in[-\\ell,\\ell]\\) ). Generally, an atomic orbital \\(\\psi_{\\ell m}\\) , also called a basis function , is given by a set of contracted primitives: \\[\\psi_{\\ell m} (\\mathbf A, \\mathbf r) = \\sum_u d_u\\,g_{u,\\ell m}(\\mathbf A, \\mathbf r),\\] where \\(d_u\\) form a set of contraction coefficients . In CP2K (as in other quantum chemistry programs), basis sets are defined by a set of contractions, each for a given shell \\(\\ell\\) (s-type, p-type, d-type, etc) containing primitives (so a list of exponents and their corresponding contraction coefficients). The same coefficients and exponents are used for each atomic orbital in a shell (i.e., each possible value of \\(m\\) ). But basis function can be grouped! Some basis functions (even with different \\(\\ell\\) ) may be grouped to share the same exponent. This is the case, e.g., in the (in)famous STO-3G (3 gaussians for each basis function) in which so-called \"SP\" basis functions are found, defined by using a common exponent but different contraction coefficient for each of the 3 gaussians defining the actual s-type and p-type basis function. MOLOPT basis sets (see below) are built on this principle.","title":"Basis functions"},{"location":"basis_sets_and_pseudos/#improving-the-basis-set-by-adding-more-basis-functions","text":"Multiple- \\(\\zeta\\) basis sets use \\(\\zeta\\) basis functions for each atomic orbitals in the atom. For example, double- \\(\\zeta\\) basis sets use two basis function for each atomic orbital (e.g., a total of 10 basis function for the carbon). They may be grouped to share the same exponent, or not. On top of that, two other kind of basis function might be added: polarization functions , which have a larger angular momentum than those of the ground state of the atom (e.g., d-type basis functions for the carbon), and diffuse functions , which have very small exponents (corresponding to very \"large\" gaussians). Thus, the number of basis function for a given atom is very different from one basis set to the other. Note One way to ease the communication is to report, for each shell, the number of primitives (uncontracted set) and the number of basis functions (contracted set) in the form (uncontracted set) , [contracted set] . For example, in a double-zeta basis set defined by 3 gaussian per basis function, the result would be (12s,6p) and [3s,2p] . The form [12s6p|3s2p] is also found, and reported by the webserver.","title":"Improving the basis set by adding more basis functions"},{"location":"basis_sets_and_pseudos/#pseudopotentials","text":"See https://journals.aps.org/prb/abstract/10.1103/PhysRevB.54.1703 , https://journals.aps.org/prb/abstract/10.1103/PhysRevB.58.3641 , http://www.physics.metu.edu.tr/~hande/teaching/741-lectures/lecture-08.pdf To be continued, but: Introduce both basis sets and pseudos; Present the naming rule(s) of basis sets and pseudopontials; Try to indicate which basis set goes with witch potential. Parser?","title":"Pseudopotentials"},{"location":"install/","text":"Install and contribute \u00a4 Install and run (simple version) \u00a4 First, install node. It is recommended to use nvm to do so. Then: # clone git clone https://github.com/pierre-24/cp2k-basis.git cd cp2k-basis # optional (but recommended): create virtualenv python -m venv virtualenv source venv/bin/activate # install dependencies make install make install-front # build front make front # run the webservice: # either: make run # or, flask --app cp2k_basis_webservice run If you want to use your own library of basis and pseudopotentials, check out this page , and then: # create an instance folder # see https://flask.palletsprojects.com/en/latest/config/#instance-folders mkdir instance # copy source cp library/DATA_SOURCES.yml instance/ # after editing the DATA_SOURCES.yml file to fit your needs, # run the `cb_fetch_data` command to create a new library: cb_fetch_data instance/DATA_SOURCES.yml -o instance/library.h5 # setup a custom config echo \"LIBRARY='instance/library.h5'\" > instance/settings.py And then you can restart the webservice. Contribute \u00a4 Contributions, either with issues or pull requests are welcomed. Install \u00a4 If you want to contribute, this is the usual deal: start by forking , then clone your fork and use the following install procedure instead. cd cp2k-basis # definitely recommended in this case: use a virtualenv! python -m venv virtualenv source venv/bin/activate # install also dev dependencies pip install pip-tools make install-dev make install-front # ... then build front and run (see above) A useful setting is to setup the webservice to use the (smaller) test library for development: mkdir instance echo \"LIBRARY='tests/LIBRARY_EXAMPLE.h5'\" > instance/settings.py The webservice should then be faster to start & reload. Contribute \u00a4 Don't forget to work on a separate branch, and to run the linting and tests: make lint # flake8 make test # unit tests If you want to see and edit the doc, you can run the mkdocs webserver: make doc-serve Don't forget to edit the documentation if you modify something.","title":"Install and contribute"},{"location":"install/#install-and-contribute","text":"","title":"Install and contribute"},{"location":"install/#install-and-run-simple-version","text":"First, install node. It is recommended to use nvm to do so. Then: # clone git clone https://github.com/pierre-24/cp2k-basis.git cd cp2k-basis # optional (but recommended): create virtualenv python -m venv virtualenv source venv/bin/activate # install dependencies make install make install-front # build front make front # run the webservice: # either: make run # or, flask --app cp2k_basis_webservice run If you want to use your own library of basis and pseudopotentials, check out this page , and then: # create an instance folder # see https://flask.palletsprojects.com/en/latest/config/#instance-folders mkdir instance # copy source cp library/DATA_SOURCES.yml instance/ # after editing the DATA_SOURCES.yml file to fit your needs, # run the `cb_fetch_data` command to create a new library: cb_fetch_data instance/DATA_SOURCES.yml -o instance/library.h5 # setup a custom config echo \"LIBRARY='instance/library.h5'\" > instance/settings.py And then you can restart the webservice.","title":"Install and run (simple version)"},{"location":"install/#contribute","text":"Contributions, either with issues or pull requests are welcomed.","title":"Contribute"},{"location":"install/#install","text":"If you want to contribute, this is the usual deal: start by forking , then clone your fork and use the following install procedure instead. cd cp2k-basis # definitely recommended in this case: use a virtualenv! python -m venv virtualenv source venv/bin/activate # install also dev dependencies pip install pip-tools make install-dev make install-front # ... then build front and run (see above) A useful setting is to setup the webservice to use the (smaller) test library for development: mkdir instance echo \"LIBRARY='tests/LIBRARY_EXAMPLE.h5'\" > instance/settings.py The webservice should then be faster to start & reload.","title":"Install"},{"location":"install/#contribute_1","text":"Don't forget to work on a separate branch, and to run the linting and tests: make lint # flake8 make test # unit tests If you want to see and edit the doc, you can run the mkdocs webserver: make doc-serve Don't forget to edit the documentation if you modify something.","title":"Contribute"},{"location":"library_build/","text":"Building, using and improving the library \u00a4 This page describes how to manipulate the library of basis sets and pseudopotentials. Info If you want to know how the basis sets and pseudopotentials are actually stored in the file, check out this page . Building \u00a4 Info The current library and the source YAML file are available here . To be continued, but Describe properly the format of the YAML input; Describe the cb_fetch_data command. Using \u00a4 Currently, the web interface is the only way to query the library. However, you can have a quick overview of the content of the library using: cb_explore_library library.h5 Improving \u00a4 To be continued, but: Describe how to use cb_explore_file tools. Patching and stuffs","title":"Build, use and improve the library"},{"location":"library_build/#building-using-and-improving-the-library","text":"This page describes how to manipulate the library of basis sets and pseudopotentials. Info If you want to know how the basis sets and pseudopotentials are actually stored in the file, check out this page .","title":"Building, using and improving the library"},{"location":"library_build/#building","text":"Info The current library and the source YAML file are available here . To be continued, but Describe properly the format of the YAML input; Describe the cb_fetch_data command.","title":"Building"},{"location":"library_build/#using","text":"Currently, the web interface is the only way to query the library. However, you can have a quick overview of the content of the library using: cb_explore_library library.h5","title":"Using"},{"location":"library_build/#improving","text":"To be continued, but: Describe how to use cb_explore_file tools. Patching and stuffs","title":"Improving"},{"location":"library_file_format/","text":"The library.h5 file format \u00a4 Info A library file is in the HDF5 format , which divide the data in groups (i.e., \"folders\") and datasets (i.e., \"files\"), the latter being array of data. Groups and datasets can have attributes. The basis set library root contains at least two main (storage) groups: basis_sets and pseudopotentials . They are detailed below. The basis_sets group \u00a4 This group contains one subgroup per basis set (a basis set group), for which the name is the basis set name. In each basis set group, there is one subgroup for each atom (a atomic bs group). Finally, in that atomic bs subgroup, there is one atomic bs variant group for each variant. Thus, the following structure is valid: * | +- basis_sets/ # `basis_sets` group | +- SZV-MOLOPT-GTH/ # a `basis set` group | | | +- C/ # an `atomic bs` group | | | | | +- q4/ # an `atomic bs variant` group (see below) | | | +- H/ | | | | | +- q1/ | | | +- ... | +- DZVP-MOLOPT-GTH/ | +- C/ | | | +- q4/ | +- H/ | | | +- q1/ | +- ... Each atomic bs variant group is composed of the following datasets, which are all mandatory: Name Shape Attributes Info info (2,) --- contains (len(names), len(contractions)) names (n,) --- contains n=len(names) names contraction_{i}_info (4+n,) nshell [mandatory] contains (principle_n, l_min, l_max, nfunc, nshell[0], ..., nshell[n-1]) with n=attrs[nshell] contraction_{i}_exp_coefs (nfunc,1+sum(nshell)) --- contains exponents in [:, 0] and coefficients in [:, 1:] The two last datasets are repeated with i=[0:len(contractions)] . Thus, the following structure, e.g., is valid: * | + basis_sets/TZVP-GTH/C/q4/ # contains two contractions | +- info # contains (2, 2) +- names # contains (TZVP-GTH-q4, TZVP-GTH) +- contraction_0_info # contains (2, 0, 1, 5, 3, 3) | # and has attribute nshell=2 +- contraction_0_exp_coefs # of shape (5, 7) +- contraction_1_info # contains (3, 2, 2, 1, 1) | # and has attribute nshell=1 +- contraction_1_exp_coefs # of shape (1, 2) The pseudopotentials group \u00a4 Again, this group contains one subgroup per pseudopotential familly (a pp family group), which name is the family name. In each pp family group, there is one subgroup for each basis set (a atomic pp group). Finally, in that atomic pp subgroup, there is one atomic pp variant group for each variant. Thus, the following structure is valid: * | +- pseudopotentials/ # the `pseudopotentials` group | +- GTH-BLYP/ # a `pp family group` | | | +- C/ # an `atomic pp` group | | | | | +- q4/ # an `atomic pp variant` group (see below) | | | +- H/ | | | | | +- q1/ | | | +- ... | +- GTH-PBE/ | +- C/ | | | +- q4/ | +- ... Each atomic pp variant group is composed of the following datasets, which are all mandatory: Name Shape Attributes Info info (3+n,) nelec [mandatory] contains (len(names), len(lcoefs), len(nlprojectors), nelec[0], ... nelec[n-1]) with n=attrs[nelec] names (n,) --- contains n=len(names) names local_radius_coefs (1+n,) --- contains (lradius, lcoef[0],..., lcoefs[n-1]) with n=len(lcoefs) nlprojector_{i}_radius_coefs (1+n,) nfunc [mandatory] contains (nlradius, nlcoefs[triu(n)[0]], ..., nlcoefs[triu(n)[n-1]]) with n=attrs[nfunc] and triu(N) gives the list of the upper triangular indices of a square matrix of size N . The last dataset is repeated with i=[0:len(nlprojectors)] . The following structure, e.g., is valid: * | +- pseudopotentials/GTH-BLYP/Ne/q8/ | +- info # contains (2, 2, 2, 2, 6) | # and has attribute nelec=2 +- names # contains (GTH-BLYP-q8, GTH-BLYP) +- local_radius_coefs # of shape (3,) +- nlprojector_0_radius_coefs # of shape (4,) | # and has attribute nfunc=2 +- nlprojector_1_radius_coefs # of shape (2,) # and has attribute nfunc=1 Metadata \u00a4 The file may have the date_build attribute, indicating when it was created. Each basis set and pp familly group might also have the following attributes: Name Type Description source str URL to the original file used to build the data description str Description of the data references array One-dimensional array of URLs to reference papers (DOI) or sources. Those attributes are optional: if an attribute is missing, an empty value can be assumed.","title":"Library file format"},{"location":"library_file_format/#the-libraryh5-file-format","text":"Info A library file is in the HDF5 format , which divide the data in groups (i.e., \"folders\") and datasets (i.e., \"files\"), the latter being array of data. Groups and datasets can have attributes. The basis set library root contains at least two main (storage) groups: basis_sets and pseudopotentials . They are detailed below.","title":"The library.h5 file format"},{"location":"library_file_format/#the-basis_sets-group","text":"This group contains one subgroup per basis set (a basis set group), for which the name is the basis set name. In each basis set group, there is one subgroup for each atom (a atomic bs group). Finally, in that atomic bs subgroup, there is one atomic bs variant group for each variant. Thus, the following structure is valid: * | +- basis_sets/ # `basis_sets` group | +- SZV-MOLOPT-GTH/ # a `basis set` group | | | +- C/ # an `atomic bs` group | | | | | +- q4/ # an `atomic bs variant` group (see below) | | | +- H/ | | | | | +- q1/ | | | +- ... | +- DZVP-MOLOPT-GTH/ | +- C/ | | | +- q4/ | +- H/ | | | +- q1/ | +- ... Each atomic bs variant group is composed of the following datasets, which are all mandatory: Name Shape Attributes Info info (2,) --- contains (len(names), len(contractions)) names (n,) --- contains n=len(names) names contraction_{i}_info (4+n,) nshell [mandatory] contains (principle_n, l_min, l_max, nfunc, nshell[0], ..., nshell[n-1]) with n=attrs[nshell] contraction_{i}_exp_coefs (nfunc,1+sum(nshell)) --- contains exponents in [:, 0] and coefficients in [:, 1:] The two last datasets are repeated with i=[0:len(contractions)] . Thus, the following structure, e.g., is valid: * | + basis_sets/TZVP-GTH/C/q4/ # contains two contractions | +- info # contains (2, 2) +- names # contains (TZVP-GTH-q4, TZVP-GTH) +- contraction_0_info # contains (2, 0, 1, 5, 3, 3) | # and has attribute nshell=2 +- contraction_0_exp_coefs # of shape (5, 7) +- contraction_1_info # contains (3, 2, 2, 1, 1) | # and has attribute nshell=1 +- contraction_1_exp_coefs # of shape (1, 2)","title":"The basis_sets group"},{"location":"library_file_format/#the-pseudopotentials-group","text":"Again, this group contains one subgroup per pseudopotential familly (a pp family group), which name is the family name. In each pp family group, there is one subgroup for each basis set (a atomic pp group). Finally, in that atomic pp subgroup, there is one atomic pp variant group for each variant. Thus, the following structure is valid: * | +- pseudopotentials/ # the `pseudopotentials` group | +- GTH-BLYP/ # a `pp family group` | | | +- C/ # an `atomic pp` group | | | | | +- q4/ # an `atomic pp variant` group (see below) | | | +- H/ | | | | | +- q1/ | | | +- ... | +- GTH-PBE/ | +- C/ | | | +- q4/ | +- ... Each atomic pp variant group is composed of the following datasets, which are all mandatory: Name Shape Attributes Info info (3+n,) nelec [mandatory] contains (len(names), len(lcoefs), len(nlprojectors), nelec[0], ... nelec[n-1]) with n=attrs[nelec] names (n,) --- contains n=len(names) names local_radius_coefs (1+n,) --- contains (lradius, lcoef[0],..., lcoefs[n-1]) with n=len(lcoefs) nlprojector_{i}_radius_coefs (1+n,) nfunc [mandatory] contains (nlradius, nlcoefs[triu(n)[0]], ..., nlcoefs[triu(n)[n-1]]) with n=attrs[nfunc] and triu(N) gives the list of the upper triangular indices of a square matrix of size N . The last dataset is repeated with i=[0:len(nlprojectors)] . The following structure, e.g., is valid: * | +- pseudopotentials/GTH-BLYP/Ne/q8/ | +- info # contains (2, 2, 2, 2, 6) | # and has attribute nelec=2 +- names # contains (GTH-BLYP-q8, GTH-BLYP) +- local_radius_coefs # of shape (3,) +- nlprojector_0_radius_coefs # of shape (4,) | # and has attribute nfunc=2 +- nlprojector_1_radius_coefs # of shape (2,) # and has attribute nfunc=1","title":"The pseudopotentials group"},{"location":"library_file_format/#metadata","text":"The file may have the date_build attribute, indicating when it was created. Each basis set and pp familly group might also have the following attributes: Name Type Description source str URL to the original file used to build the data description str Description of the data references array One-dimensional array of URLs to reference papers (DOI) or sources. Those attributes are optional: if an attribute is missing, an empty value can be assumed.","title":"Metadata"},{"location":"webserver/","text":"How to use the web interface? \u00a4 Info If you are not familiar with the concept of basis set and pseudopotentials, check out this introduction . To be continued.","title":"Using the web interface"},{"location":"webserver/#how-to-use-the-web-interface","text":"Info If you are not familiar with the concept of basis set and pseudopotentials, check out this introduction . To be continued.","title":"How to use the web interface?"}]}