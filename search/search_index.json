{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>cp2k-basis</code>","text":"<p>A library to parse CP2K basis sets and GTH pseudopotentials, which also comes with a webserver to find out and select a basis set and its matching pseudopotential for your CP2K calculations, similar to the basis set exchange.</p> <p>More info are provided there.</p> <p>Info</p> <p>Check out the live version, available at https://cp2k-basis.pierrebeaujean.net.</p>"},{"location":"about/","title":"About this project.","text":"<p>TL;DR: This project, develloped by Pierre Beaujean, provides an easy way to select matching basis sets and GTH pseudopotentials for your CP2K calculation. For the rest, go to the basis set exchange \ud83d\ude03</p>"},{"location":"about/#what","title":"What?","text":"<p>Info</p> <p>If you are not familiar with the concept of basis set and pseudopotentials, check out this introduction.</p>"},{"location":"about/#why-cp2k","title":"Why CP2K?","text":"<p>CP2K is a quantum chemistry program that can perform atomistic simulations. It is especially known for mixing Gaussian and plane wave approaches, which are useful to perform ab initio molecular dynamics, among others.</p>"},{"location":"about/#why-this-if-there-is-the-basis-set-exchange","title":"Why this if there is the basis set exchange?","text":"<p>The basis set exchange (BSE), developed by MolSSI is a trustworthy provider of basis sets and effective core potentials (ECP) since a long time ago.  It even provides an output for CP2K.  In fact, this project has no intention of replacing the BSE, and users should happily continue to use it to fetch ECP and all-electron basis sets (don't forget to use the <code>ALL</code> potential if needed, thought).</p> <p>However, CP2K calculations can also use a pair of matching GTH potentials and corresponding basis sets. This is actually one of the first thing you learn when you try to use the CP2K program. They are not available in the BSE, so this is where this project is useful, by allowing the users to look through the library of available basis sets and pseudopotentials with a web interface similar to the BSE.</p> <p>Behind the scene, it also provides a library to read, write and store CP2K basis sets and potentials.</p>"},{"location":"about/#alternatives","title":"Alternatives?","text":"<ul> <li>The official <code>cp2k-data</code> repository, which might contain more up to date version of GTH potentials.</li> <li>This webpage, which provide an easy way to explore the previous repository.</li> <li>Other tools (related to input and output) are also listed in the CP2K documentation.</li> </ul>"},{"location":"about/#how","title":"How?","text":"<p>For the moment, the basis sets and GTH pseudopotentials are taken from the <code>/data</code> directory of the CP2K repository.</p> <p>This project is developed using Python 3, <code>numpy</code> and <code>h5py</code> (for the storage).</p> <p>The webserver is powered by <code>flask</code>.</p> <p>This documentation is built using <code>mkdocs</code>.</p> <p>If you are interested in that, maybe you want to help? If so, I'm happy to welcome your contributions!</p>"},{"location":"about/#who","title":"Who?","text":"<p>My name is Pierre Beaujean, and I'm a Ph.D. in quantum chemistry from the University of Namur (Belgium). I'm the main (and only) developer of this project, used in our lab. I use CP2K in the frame of my post-doctoral research, and I developed this project for all the reasons listed above.</p>"},{"location":"developers/bs_and_pseudo_file_format/","title":"Basis sets and GTH pseudopotential files format in CP2K","text":"<p>To be continued, but</p> <ul> <li>See there for the basis sets, and</li> <li>there for the pseudopontials.</li> </ul>"},{"location":"developers/install/","title":"Install and contribute","text":""},{"location":"developers/install/#install-and-run-simple-version","title":"Install and run (simple version)","text":"<p>First, install node. It is recommended to use <code>nvm</code> to do so.</p> <p>Then, install the project and its dependencies:</p> <pre><code># clone \ngit clone https://github.com/pierre-24/cp2k-basis.git\ncd cp2k-basis\n\n# optional (but recommended): create virtualenv\npython -m venv virtualenv\nsource venv/bin/activate\n\n# install dependencies\nmake install\nmake install-front\n\n# build front\nmake front\n</code></pre> <p>Then, you can either build the library of basis sets and pseudopotentials, as described on this page, or download its latest version (from the <code>dev</code> branch):</p> <pre><code># create an instance folder\n# see https://flask.palletsprojects.com/en/latest/config/#instance-folders\nmkdir instance\n\n# To download the library, use:\nwget https://github.com/pierre-24/cp2k-basis/releases/download/latest/latest_library.h5 -o instance/libary.h5\n\n# Alternatively, to build the library from scratch, use the `cb_fetch_data` command:\ncb_fetch_data library/DATA_SOURCES.yml -o instance/library.h5 \n</code></pre> <p>And finally, you can start the webservice:</p> <pre><code># either:\nmake run\n# or,\nflask --app cp2k_basis_webservice run\n</code></pre>"},{"location":"developers/install/#contribute","title":"Contribute","text":"<p>Contributions, either with issues or pull requests are welcomed.</p>"},{"location":"developers/install/#install","title":"Install","text":"<p>If you want to contribute, this is the usual deal:  start by forking, then clone your fork and use the following install procedure instead.</p> <pre><code>cd cp2k-basis\n\n# definitely recommended in this case: use a virtualenv!\npython -m venv virtualenv\nsource venv/bin/activate\n\n# install also dev dependencies\npip install pip-tools\nmake install-dev\nmake install-front\n\n# ... then build front and run (see above)\n</code></pre>"},{"location":"developers/install/#tips-to-contribute","title":"Tips to contribute","text":"<ul> <li> <p>A useful setting is to set up the webservice to use a (smaller) test library for development:</p> <pre><code>echo \"LIBRARY='tests/LIBRARY_EXAMPLE.h5'\" &gt; instance/settings.py\n</code></pre> <p>The webservice should then be faster to start &amp; reload.</p> </li> <li> <p>A good place to start is the list of issues.   In fact, it is easier if you start by filling an issue, and if you want to work on it, says so there, so that everyone knows that the issue is handled.</p> </li> <li> <p>Don't forget to work on a separate branch.   Since this project follow the git flow, you should base your branch on <code>dev</code>, not work in it directly:</p> <pre><code>git checkout -b new_branch origin/dev\n</code></pre> </li> <li> <p>Don't forget to regularly run the linting and tests:</p> <pre><code>make lint\nmake test\n</code></pre> <p>Indeed, the code follows the PEP-8 style recommendations, checked by <code>flake8</code>, for the python part and use <code>jshint</code> for the JS part. Having an extensive test suite is also a good idea to prevent regressions.</p> </li> <li> <p>If you modify the front (i.e., the JS script file or the stylesheet), don't forget to rebuild the front to see the effects:</p> <pre><code>make front\n</code></pre> <p>Indeed, both JS and SCSS are minified.</p> </li> <li> <p>If you want to see and edit the doc, you can run the <code>mkdocs</code> webserver:</p> <pre><code>make doc-serve\n</code></pre> </li> <li> <p>Pull requests should be unitary, and include unit test(s) and documentation if needed.    The test suite and lint must succeed for the merge request to be accepted.</p> </li> </ul>"},{"location":"developers/library_build/","title":"Building, using and improving the library","text":"<p>This page describes how to manipulate the library of basis sets and pseudopotentials.</p>"},{"location":"developers/library_build/#building-the-library-with-cb_fetch_data","title":"Building the library (with <code>cb_fetch_data</code>)","text":""},{"location":"developers/library_build/#creating-a-library-from-the-yaml-source-file","title":"Creating a library from the YAML source file","text":"<p>Info</p> <p>The current library and the source YAML file are available here.</p> <p>From an existing YAML source file <code>DATA_SOURCE.yml</code> with the format described below, just use</p> <pre><code>cb_fetch_data DATA_SOURCES.yml -o library.h5\n</code></pre> <p>This will create a <code>library.h5</code> file, which might be exploited later on.</p> <p>If you want to have insight on what is happening, you might want to use:</p> <pre><code>LOGLEVEL=INFO cb_fetch_data DATA_SOURCES.yml -o library.h5\n</code></pre> <p>which is more verbose.</p>"},{"location":"developers/library_build/#description-of-the-yaml-source-file-format","title":"Description of the YAML source file format","text":""},{"location":"developers/library_build/#repositories","title":"Repositories","text":"<p>Building the library requires a YAML file which describe all the sources for the basis sets and pseudopotentials . It is composed of:</p> <pre><code>repositories: # list of repositories\nmetadata: # metadata for each basis set and pseud\n</code></pre> <p>The first item is a list of repositories. A repository is defined by a base url (<code>base</code>), which is a template. Keyword inside curly braces will be replaced by their value given in the <code>keyword</code> dictionary (following the Python <code>format()</code> syntax).</p> Example <p>With:</p> <pre><code>repositories:\n- base: https://github.com/cp2k/cp2k/raw/{commit}/data/\n  data:\n    commit: '786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1'\n</code></pre> <p>the base URL will be <code>https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/</code>.</p> <p>Then, each repository has different files (listed <code>files</code>).</p>"},{"location":"developers/library_build/#files","title":"Files","text":"<p>Each file is described using the following structure:</p> <pre><code>name: &lt;NAME&gt;\ntype: BASIS_SETS\nfamily_name:  # dictionary (mandatory)\nvariant:  # dictionary (mandatory)\n</code></pre> <p>Each file has a <code>name</code> and a type linked to its content, which is either <code>BASIS_SETS</code> or <code>POTENTIALS</code>. While gathering the file, <code>cb_fetch_data</code> will download it from <code>&lt;BASE_URL&gt;/&lt;NAME&gt;</code>. </p> Example <p>From the following structure:</p> <pre><code>repositories:\n- base: https://github.com/cp2k/cp2k/raw/{commit}/data/\n  data:\n    commit: '786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1'\n  files:\n    - name: BASIS_MOLOPT\n      type: BASIS_SETS\n</code></pre> <p>The URL https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/BASIS_MOLOPT will be used to fetch the file.</p> <p>Note</p> <p>It is possible to apply a patch (in the unified <code>diff</code> format) by adding a <code>patch</code> option, whose value should be a path (relative to the directory where the YAML file is) to a patch file. This is useful to correct small inconsistencies or mistake.</p>"},{"location":"developers/library_build/#sorting-out-the-content-of-the-file","title":"Sorting out the content of the file","text":"<p>As you can see if you check out a file in the CP2K <code>data/</code> folder, each file contains different basis sets (or pseudopotential) for different atom, so one should help  <code>cb_fetch_data</code> to sort out everything.</p> <p>There are definition for each atom, followed by nicknames which indicates which basis set/pseudopotential this is. There may be multiple nickname, though there is usually two, of the form <code>&lt;name&gt; &lt;name&gt;-qX</code>, where <code>&lt;name&gt;</code> is the family name and the <code>-qX</code> variant indicate the number of valence electrons.</p> Example <p>In, e.g., <code>BASIS_MOLOPT</code>, one has:</p> <pre><code>H  SZV-MOLOPT-GTH SZV-MOLOPT-GTH-q1\n# ...\nH  DZVP-MOLOPT-GTH DZVP-MOLOPT-GTH-q1\n# ...\nH  TZVP-MOLOPT-GTH TZVP-MOLOPT-GTH-q1\n# ...\nC  SZV-MOLOPT-GTH SZV-MOLOPT-GTH-q4\n# ...\n</code></pre> <p>From the nicknames <code>cb_fetch_data</code> should figure out in which family (i.e., the basis set or pseudopotential) it will store this definition. Since the naming is not systematic (not always of the form <code>&lt;name&gt;-qX</code>), one has to resort to a heavier tool which can show some flexibility. Thus, this is performed thanks to the <code>family_name</code> dictionary, which contains a REGEX as the key and a replacement as the value. All the nickname are checked against the REGEX, in the order given in the file.</p> <ul> <li>If a REGEX matches, then the search stops and:</li> <li>If the replacement is <code>~</code> (the <code>null</code> value in YAML), the name is discarted</li> <li>Otherwise, the replacement is yield, using <code>pattern.replace(name, replacement)</code></li> <li>If at the end, no REGEX matches, the name is just discarded.</li> </ul> Example <p>With:</p> <pre><code>repositories:\n- base: https://github.com/cp2k/cp2k/raw/{commit}/data/\n  data:\n    commit: '786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1'\n  files:\n    - name: BASIS_MOLOPT\n      type: BASIS_SETS\n      family_name:\n        '^(.*)(-q\\d{1,2})$': '\\1'\n</code></pre> <p><code>cb_fetch_data</code> will apply the REGEX to every nickname, and will end up with a list of family names.  With <code>SZV-MOLOPT-GTH SZV-MOLOPT-GTH-q1</code>, the result will be in both cases <code>SZV-MOLOPT-GTH</code>.</p> <p>Then, the <code>variant</code> dictionary is used to determine the variant (i.e., the number of valence electron, in the form <code>qXX</code>) from the nicknames. The rules are the same as with <code>family_name</code>, but only the first result will be used.</p> Example <p>With:</p> <pre><code>repositories:\n- base: https://github.com/cp2k/cp2k/raw/{commit}/data/\n  data:\n    commit: '786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1'\n  files:\n    - name: BASIS_MOLOPT\n      type: BASIS_SETS\n      family_name:\n        '^(.*)(-q\\d{1,2})$': '\\1'\n      variant:\n        '^.*-(q\\d{1,2})$': '\\1'\n</code></pre> <p><code>cb_fetch_data</code> will apply the REGEX to every nickname, and will take the first result. With <code>SZV-MOLOPT-GTH SZV-MOLOPT-GTH-q1</code>, the first nickname yield no result, while the second yield <code>q1</code>, which will be used.</p>"},{"location":"developers/library_build/#adding-metadata","title":"Adding metadata","text":"<p>Finaly, <code>cb_fetch_data</code>, it will add metadata to those families.</p> <p>To do so, the <code>metdata</code> dictionary will be used, in which the key is a REGEX matched against the name of the family. If there is a match, then all the values are attributed as metadata.</p> Example <p>With:</p> <pre><code>repositories:\n- base: https://github.com/cp2k/cp2k/raw/{commit}/data/\n  data:\n    commit: '786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1'\n  files:\n    - name: BASIS_MOLOPT\n      type: BASIS_SETS\n      family_name:\n        '^(.*)(-q\\d{1,2})$': '\\1'\n      variant:\n        '^.*-(q\\d{1,2})$': '\\1'\nmetadata:\n  '^SZV-MOLOPT-GTH$':\n    references: [https://github.com/cp2k/cp2k-data]\n    description: A double zeta basis set\n  '.*':\n    references: [https://github.com/cp2k/cp2k-data]\n    description: MOLOPT basis set.\n</code></pre> <p>For the basis set <code>SZV-MOLOPT-GTH</code>, the metadata will contain two fields: <code>references</code> and <code>description</code> (which will contain \"A double zeta basis set\") For the basis set <code>DZVP-MOLOPT-GTH</code> (or any other basis, thanks to the use of <code>.*</code>), the fields in the metadata will be the same, but the value of <code>description</code> is different (\"MOLOPT basis set.\").</p> <p>For the moment, <code>references</code>, <code>description</code> and <code>tags</code> are the three metadata that should be reported for every basis set and pseudopotential.</p> <p>Note</p> <p>In practice, the YAML format defines anchors and aliases, which allow to define references and tags once and use them multiple time.</p>"},{"location":"developers/library_build/#using-the-library","title":"Using the library","text":"<p>Info</p> <p>If you want to know how the basis sets and pseudopotentials are actually stored in the library file, check out this page.</p> <p>Currently, the web interface is the easiest way to query the library.</p> <p>However, you can have a quick overview of the content of the library using:</p> <pre><code>cb_explore_library library.h5\n</code></pre> <p>You can also use the <code>cp2k_basis</code> library developed for this project.</p> <p>Example</p> <p>See there for some of Python code to access the library and query its content.</p>"},{"location":"developers/library_build/#improving-the-library","title":"Improving the library","text":"<p>To improve the library, it might be easier to work directly with the file in question. This is possible with the <code>cb_explore_file</code> command. It takes a source YAML containing a list of files as an input, so that you can experiment before actually updating the library.</p>"},{"location":"developers/library_build/#an-example-adding-basis_molopt_ucl","title":"An example: adding <code>BASIS_MOLOPT_UCL</code>","text":"<p>Issue #6 requested the addtion of <code>BASIS_MOLOPT_UCL</code> to the library. This will be used as an example.</p> <p>First of all, download the file (notice the <code>/raw/</code>):</p> <pre><code>wget https://github.com/cp2k/cp2k/raw/master/data/BASIS_MOLOPT_UCL\n</code></pre> <p>Then create a <code>source.yml</code> file:</p> <pre><code>touch source.yml\n</code></pre> <p>This file will follow the same syntax as the one described above for files, so the following skeleton can be used</p> <pre><code>files:\n- name: BASIS_MOLOPT_UCL\n  type: BASIS_SETS\n</code></pre> <p>You can now run <code>cb_explore_file</code> ... But nothing much happens:</p> <pre><code>$ cb_explore_file source.yml\n*\n|\n+- basis_sets\n   |\n*\n|\n+- pseudopotentials\n   |\n</code></pre> <p>Indeed, after it has read <code>source.yml</code>, the program reports the content it has extracted, which is in that case nothing. This is normal: as described above, if no rule matches the nickname, they are just discarded. This is the case here, since there is no rule. Hopefully, the solution in this case is pretty straightforward: the name can be easily extracted from nicknames such as <code>TZVP-MOLOPT-SR-GTH-q3</code>, and so is the variant.</p> Example <p>With the following <code>source.yml</code>, <pre><code>files:\n- name: BASIS_MOLOPT_UCL\n  type: BASIS_SETS\n  family_name:\n    '^(.*)(-q\\d{1,2})$': '\\1'\n  variant:\n    '^.*-(q\\d{1,2})$': '\\1'\n</code></pre></p> <p>The result is better:</p> <pre><code>$ cb_explore_file source.yml \n*\n|\n+- basis_sets\n   |\n   +- TZVP-MOLOPT-SR-GTH\n   |  metadata={'source': 'BASIS_MOLOPT_UCL'}\n   |  |\n   |  +- Li: q3\n   |  +- Be: q4\n   (...)\n</code></pre> <p>The following basis sets were extracted:</p> <pre><code>$ cb_explore_file source.yml | grep \"   +-\" \n   +- TZVP-MOLOPT-SR-GTH\n   +- TZV2P-MOLOPT-SR-GTH\n   +- DZVPd-MOLOPT-SR-GTH\n   +- TZVPd-MOLOPT-SR-GTH\n   +- TZV2Pd-MOLOPT-SR-GTH\n   +- SZV-MOLOPT-SR-GTH\n   +- DZVP-MOLOPT-SR-GTH\n   +- SZV-MOLOPT-GTH\n   +- DZVP-MOLOPT-GTH\n   +- TZVP-MOLOPT-GTH\n   +- TZV2P-MOLOPT-GTH\n   +- TZV2PX-MOLOPT-GTH\n   +- DZV-MOLOPT-SR-GTH\n</code></pre> <p>Now you just need to add the metadata and iterate on the result until you are happy.</p> Example <p>With the following <code>source.yml</code>, <pre><code>files:\n- name: BASIS_MOLOPT_UCL\n  type: BASIS_SETS\n  family_name:\n    '^(.*)(-q\\d{1,2})$': '\\1'\n  variant:\n    '^.*-(q\\d{1,2})$': '\\1'\nmetadata:\n  '^TZVP-MOLOPT-SR-GTH$':\n    references: [ https://github.com/cp2k/cp2k-data ]\n    description: Short-range triple zeta (+ polarization) basis set.\n    tags: [MOLOPT, SR, GTH]\n</code></pre></p> <p>Metadata were added to the basis sets:</p> <pre><code>$ cb_explore_file source.yml \n*\n|\n+- basis_sets\n   |\n   +- TZVP-MOLOPT-SR-GTH\n   |  metadata={'references': ['https://github.com/cp2k/cp2k-data'], 'description': 'Short-range triple zeta (+ polarization) basis set.',  'tags': ['MOLOPT', 'SR', 'GTH']}\n   |  |\n   |  +- Li: q3\n   |  +- Be: q4\n   (...)\n</code></pre> <p>When you are happy with the result (metadata should be defined for all basis sets!), you can add it to the main <code>DATA_SOURCES.yml</code> and do a pull request.</p>"},{"location":"developers/library_content/","title":"Content of the library","text":""},{"location":"developers/library_content/#source","title":"Source","text":"<p>The following files are used to build the current library:</p> <ul> <li> <p>Basis sets:</p> <ul> <li>ALL_BASIS_SETS</li> <li>BASIS_ADMM</li> <li>BASIS_ADMM_MOLOPT</li> <li>BASIS_ADMM_UZH</li> <li>BASIS_MOLOPT</li> <li>BASIS_MOLOPT_AcPP1</li> <li>BASIS_MOLOPT_LnPP1</li> <li>BASIS_MOLOPT_LnPP2</li> <li>BASIS_MOLOPT_UCL</li> <li>BASIS_MOLOPT_UZH</li> <li>BASIS_ZIJLSTRA</li> <li>BASIS_ccGRB_UZH</li> <li>GTH_BASIS_SETS</li> </ul> </li> <li> <p>Pseudopotentials:</p> <ul> <li>AcPP1_POTENTIALS</li> <li>GTH_POTENTIALS</li> <li>LnPP1_POTENTIALS</li> <li>LnPP2_POTENTIALS</li> <li>POTENTIAL_UZH</li> </ul> </li> </ul>"},{"location":"developers/library_content/#detailed-content","title":"Detailed content","text":""},{"location":"developers/library_content/#basis-sets","title":"Basis sets","text":"Name Description Atoms DZV-ALL A double zeta valence basis set for all-electron calculations. H, He DZV-ALL-BLYP A double zeta valence basis set for all-electron calculations, optimized for BLYP. H DZV-ALL-PADE A double zeta valence basis set for all-electron calculations, optimized for PADE. H, He, Li, Be DZV-ALL-PADE-NEW A double zeta valence basis set for all-electron calculations, optimized for PADE. H, He, Li, Be DZV-GTH A double zeta valence basis set for H and He for GTH pseudopotentials H, He DZV-GTH-BLYP A double zeta valence basis set for GTH pseudopotentials, optimized for BLYP. H, He, Li, Be DZV-GTH-BLYP-CONFINED A double zeta valence basis set (CONFINED version for solids) for GTH pseudopotentials, optimized for BLYP. H DZV-GTH-PADE A double zeta valence basis set for GTH pseudopotentials, optimized for PADE. H, He, Li, Be DZV-GTH-PADE-CONFINED A double zeta valence basis set (CONFINED version for solids) for GTH pseudopotentials, optimized for PADE. H DZV-MOLOPT-GTH-AcLnPP1 MOLOPT basis set (double zeta) to explore Lanthanide chemistry in complex environments, optimized for PBE. La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu DZV-MOLOPT-SR-GTH A double zeta valence MOLOPT basis set, for solids (short-range) and GTH pseudopotentials Ce DZVP-ALL A double zeta valence (+ 1 set of polarization) basis set for all-electron calculations. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Cu DZVP-ALL-BLYP A double zeta valence (+ 1 set of polarization) basis set for all-electron calculations, optimized for BLYP. H DZVP-ALL-PADE A double zeta valence (+ 1 set of polarization) basis set for all-electron calculations, optimized for PADE. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar DZVP-ALL-PADE-NEW A double zeta valence (+ 1 set of polarization) basis set for all-electron calculations, optimized for PADE. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar DZVP-GTH A double zeta valence (+ 1 set of polarization) basis set for GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, W DZVP-GTH-BLYP A double zeta valence (+ 1 set of polarization) basis set for GTH pseudopotentials, optimized for BLYP. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K DZVP-GTH-BLYP-CONFINED A double zeta valence (+ 1 set of polarization) basis set (CONFINED  version for solids) for GTH pseudopotentials, optimized for BLYP. H, O, Al, Si, K DZVP-GTH-PADE A double zeta valence (+ 1 set of polarization) basis set for GTH pseudopotentials, optimized for PADE. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K DZVP-GTH-PADE-CONFINED A double zeta valence (+ 1 set of polarization) basis set (CONFINED version for solids) for GTH pseudopotentials, optimized for PADE. H, C, O, Al, Si, K DZVP-MOLOPT-GGA-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn DZVP-MOLOPT-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, for gas and condensed phase and GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl, Cu, Br, U DZVP-MOLOPT-GTH-AcLnPP1 MOLOPT basis set (double zeta+polarization) to explore Actinide chemistry in complex environments, optimized for PBE. Ac, Th, Pa, U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr DZVP-MOLOPT-GTH-LnPP2 MOLOPT basis set (double zeta + 1 set polarization), norm-Conserving 4f-in-Core Optimized for Trivalent Lanthanides Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu DZVP-MOLOPT-HYB-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE0 functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn DZVP-MOLOPT-MGGA-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the SCAN functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn DZVP-MOLOPT-PBE-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn DZVP-MOLOPT-PBE0-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE0 functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn DZVP-MOLOPT-SCAN-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the SCAN functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn DZVP-MOLOPT-SR-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, for solids (short-range) and GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn DZVP-MONTREAL-ALL A double zeta valence (+ 1 set of polarization) basis set for all-electron calculations. Li, Na DZVPd-MOLOPT-SR-GTH A double zeta valence (+ 1 set polarization) MOLOPT basis set, for solids (short-range) and GTH pseudopotentials Na, Mg FIT10 An auxiliary minimal basis set [5s4p1d|5s4p1d] for K-Ga, Rb-In, Cs-Ba and Hf-Tl with ADMM K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl FIT11 An auxiliary minimal basis set [5s5p1d|5s5p1d] for K-Ga, Rb-In, Cs-Ba and Hf-Tl with ADMM K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl FIT12 An auxiliary minimal basis set [4s3p4d1f|4s3p4d1f] for Sc-Ga, Y-In and Hf-Tl with ADMM Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl FIT13 An auxiliary minimal basis set [4s4p4d1f|4s4p4d1f] for some transition metals with ADMM Sc, Ti, V, Cr, Mn, Fe, Ni, Ga, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, In, Hf, Ta, W, Re, Os, Ir, Pt, Tl FIT3 An auxiliary minimal basis set [3s3p|3s3p] for H-F, Na-Cl and Br with ADMM H, He, Li, Be, B, C, N, O, F, Na, Mg, Al, Si, P, S, Cl, Br FIT4 An auxiliary minimal basis set [4s|4s] for lithium with ADMM Li FIT4-SR An auxiliary minimal basis set [4s|4s] for lithium with ADMMf for solid (short-range) Li FIT5 An auxiliary minimal basis set basis set for ADMM Li FIT5-SR An auxiliary minimal basis set [4s1p|4s1p] (FIT4 with polarization) for lithium with ADMM for solid (short-range) Li FIT6 An auxiliary minimal basis set [3s3p|3s3p] for Ge-Br, Sn-I and Pb-At (plus Ca) with ADMM Al, Ge, As, Se, Br, Sn, Sb, Te, I, Pb, Bi, Po, At FIT7 An auxiliary minimal basis set  [3s3p1d|3s3p1d] (FIT6 with polarization) for Ge-Br, Sn-I and Pb-At (plus Al, K, Ca, Rb, Cs) with ADMM Al, K, Ca, Ge, As, Se, Br, Rb, Sn, Sb, Te, I, Cs, Pb, Bi, Po, At FIT8 An auxiliary minimal basis set [4s3p1d|4s3p1d] (FIT7 with polarization) for K, Ca, Rb, Sr, Cs, Ba (plus Ca) with ADMM Al, K, Ca, Rb, Sr, Cs, Ba FIT9 An auxiliary minimal basis set [4s4p1d|4s4p1d] for Ge-Br, Sn-I and Pb-At (plus Al, K, Ca, Cu, Zn, Ag, Cd, Au, Hg, Rb, Cs, Ba) with ADMM O, Al, K, Ca, Cu, Zn, Ga, Ge, As, Se, Br, Rb, Sr, Ag, Cd, In, Sn, Sb, Te, I, Cs, Ba, Au, Hg, Tl, Pb, Bi, Po, At QZV2P-GTH A quadruple zeta valence (+ 2 set of polarization) basis set for GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar QZV3P-GTH A quadruple zeta valence (+ 3 set of polarization) basis set for GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar QZVPP-MOLOPT-GGA-GTH A MOLOPT basis set based on def-qzvpp, optimized for the small-core GTH pseudopotentials, the PBE functional, and the GAPW method (UZH). Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn QZVPP-MOLOPT-GGA-ae A MOLOPT basis set based on def-qzvpp, optimized for all-electron calculations, the PBE functional, and the GAPW method (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr QZVPP-MOLOPT-PBE-GTH A MOLOPT basis set based on def-qzvpp, optimized for the small-core GTH pseudopotentials, the PBE functional, and the GAPW method (UZH). Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn QZVPP-MOLOPT-PBE-ae A MOLOPT basis set based on def-qzvpp, optimized for all-electron calculations, the PBE functional, and the GAPW method (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr SVP-MOLOPT-GGA-GTH A MOLOPT basis set based on def-svp, optimized for small-core GTH pseudopotentials, the PBE functional, and the GAPW method (UZH). Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn SVP-MOLOPT-GGA-ae A MOLOPT basis set based on def-svp, optimized for all-electron calculations, the PBE functional, and the GAPW method (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr SVP-MOLOPT-PBE-GTH A MOLOPT basis set based on def-svp, optimized for small-core GTH pseudopotentials, the PBE functional, and the GAPW method (UZH). Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn SVP-MOLOPT-PBE-ae A MOLOPT basis set based on def-svp, optimized for all-electron calculations, the PBE functional, and the GAPW method (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr SZV-GTH A single zeta valence basis set for GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar SZV-MOLOPT-GTH A single zeta valence MOLOPT basis set, for gas and condensed phase and GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl, Cu, Br SZV-MOLOPT-SR-GTH A single zeta valence MOLOPT basis set, for solids (short-range) and GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn SZVP-MOLOPT-SR-GTH A single zeta valence (+ 1 set polarization) MOLOPT basis set, for solids (short-range) and GTH pseudopotentials Rh TZV-ALL-PADE A triple zeta valence basis set for all-electron calculations, optimized for PADE. H, He TZV2P-GTH A triple zeta valence (+ 2 set of polarization) basis set for GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar TZV2P-MOLOPT-GGA-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZV2P-MOLOPT-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set, for gas and condensed phase and GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl, Br TZV2P-MOLOPT-GTH-LnPP2 MOLOPT basis set (triple zeta + 2 set polarization), norm-Conserving 4f-in-Core Optimized for Trivalent Lanthanides Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu TZV2P-MOLOPT-HYB-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set optimized for the GTH pseudopotentials and the PBE0 functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZV2P-MOLOPT-MGGA-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the SCAN functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZV2P-MOLOPT-PBE-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZV2P-MOLOPT-PBE0-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set optimized for the GTH pseudopotentials and the PBE0 functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZV2P-MOLOPT-SCAN-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the SCAN functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZV2P-MOLOPT-SR-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set, for solids (short-range) and GTH pseudopotentials Li, Be, B, Mg, Al, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At TZV2PX-MOLOPT-GTH A triple zeta valence (+ 2 sets polarization and 1f) MOLOPT basis set, for gas and condensed phase and GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl, Br TZV2Pd-MOLOPT-SR-GTH A triple zeta valence (+ 2 sets polarization) MOLOPT basis set, for solids (short-range) and GTH pseudopotentials Na, Mg TZVP-ALL A triple zeta valence (+ 1 set of polarization) basis set for all-electron calculations. Cu TZVP-ALL-BLYP A triple zeta valence (+ 1 set of polarization) basis set for all-electron calculations, optimized for BLYP. O, F TZVP-ALL-PADE A triple zeta valence (+ 1 set of polarization) basis set for all-electron calculations, optimized for PADE. H, He, B, C, N, O, F, Ne, Al, Si, P, S, Cl, Ar TZVP-GTH A triple zeta valence (+ 1 set of polarization) basis set for GTH pseudopotentials H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar TZVP-MOLOPT-GGA-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, optimized or the GTH pseudopotentials and the PBE functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVP-MOLOPT-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, for gas and condensed phase and GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl, Br TZVP-MOLOPT-GTH-LnPP2 MOLOPT basis set (triple zeta + 1 set polarization), norm-Conserving 4f-in-Core Optimized for Trivalent Lanthanides Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu TZVP-MOLOPT-HYB-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE0 functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVP-MOLOPT-MGGA-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the SCAN functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVP-MOLOPT-PBE-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, optimized or the GTH pseudopotentials and the PBE functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVP-MOLOPT-PBE0-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the PBE0 functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVP-MOLOPT-SCAN-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, optimized for the GTH pseudopotentials and the SCAN functional (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVP-MOLOPT-SR-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, for solids (short-range) and GTH pseudopotentials Li, Be, B, Mg, Al, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At TZVPP-MOLOPT-GGA-GTH A MOLOPT basis set based on def-tzvpp, optimized for small-core GTH pseudopotentials, the PBE functional, and the GAPW method (UZH). Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVPP-MOLOPT-GGA-ae A MOLOPT basis set based on def-tzvpp, optimized for all-electron calculations, the PBE functional, and the GAPW method (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr TZVPP-MOLOPT-PBE-GTH A MOLOPT basis set based on def-tzvpp, optimized for small-core GTH pseudopotentials, the PBE functional, and the GAPW method (UZH). Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn TZVPP-MOLOPT-PBE-ae A MOLOPT basis set based on def-tzvpp, optimized for all-electron calculations, the PBE functional, and the GAPW method (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr TZVPd-MOLOPT-SR-GTH A triple zeta valence (+ 1 set polarization) MOLOPT basis set, for solids (short-range) and GTH pseudopotentials Na, Mg Zijlstra-2SP 3SP basis set, targeted at very fast calculations H, Li, Be, B, C, N, O, F, Al, Si, P, S, Cl Zijlstra-3SP 3SP basis set, targeted at very fast calculations. Author recommendation for this series. H, Li, Be, B, C, N, O, F, Al, Si, P, S, Cl Zijlstra-4SP 3SP basis set, targeted at very fast calculations H, Li, Be, B, C, N, O, F, Al, Si, P, S, Cl admm-dz An auxiliary double zeta basis set for ADMM H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn admm-dzp An auxiliary double zeta basis set for ADMM H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn admm-tz2p An auxiliary triple zeta (+ 2 set polarization) basis set for ADMM H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn admm-tzp An auxiliary triple zeta (+ 1 set polarization) basis set for ADMM H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn aug-DZVP-GTH An augmented double zeta valence (+ 1 set of polarization) basis set for GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl aug-FIT3 An auxiliary minimal basis set [4s4p|4s4p] (with extra diffuses) for H-F, Na-Cl and Br with ADMM H, C, N, O, F, Si, P, S, Cl aug-QZV2P-GTH An augmented quadruple zeta valence (+ 2 sets of polarization) basis set for GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl aug-QZV3P-GTH An augmented quadruple zeta valence (+ 3 sets of polarization) basis  set for GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl aug-TZV2P-GTH An augmented triple zeta valence (+ 2 sets of polarization) basis set for GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl aug-TZVP-GTH An augmented triple zeta valence (+ 1 set of polarization) basis set for GTH pseudopotentials H, C, N, O, F, Si, P, S, Cl aug-cFIT3 An auxiliary minimal basis set [4s4p|3s3p] (with extra diffuse and contracted) for H-F, Na-Cl and Br with ADMM H, C, N, O, F, Si, P, S, Cl aug-ccGRB-D Geometrical Response Basis Valence Set (with augmentation Functions from correlation consistent sets) Rb, Sr, Cs, Ba aug-ccGRB-Q Geometrical Response Basis Valence Set (with augmentation Functions from correlation consistent sets) Rb, Sr, Cs, Ba aug-ccGRB-T Geometrical Response Basis Valence Set (with augmentation Functions from correlation consistent sets) Rb, Sr, Cs, Ba aug-cpFIT3 An auxiliary minimal basis set [4s4p1d|3s3p1d] (with extra diffuses and polarization, contracted) for H-F, Na-Cl and Br with ADMM H, C, N, O, F, Si, P, S, Cl aug-pFIT3 An auxiliary minimal basis set [4s4p1d|4s4p1d] (with extra diffuses and polarization) for H-F, Na-Cl and Br with ADMM H, C, N, O, F, Si, P, S, Cl cFIT10 An auxiliary minimal basis set [9s4p1d|3s2p1d] for K-Ga, Rb-In, Cs-Ba and Hf-Tl with ADMM K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl cFIT11 An auxiliary minimal basis set [9s5p1d|3s2p1d] for K-Ga, Rb-In, Cs-Ba and Hf-Tl with ADMM K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl cFIT12 An auxiliary minimal basis set [4s3p4d1f|2s2p2d1f] for Sc-Ga, Y-In and Hf-Tl with ADMM Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl cFIT13 An auxiliary minimal basis set [4s4p4d1f|2s2p2d1f] for some transition metals with ADMM Sc, Ti, V, Cr, Mn, Fe, Ni, Ga, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, In, Hf, Ta, W, Re, Os, Ir, Pt, Tl cFIT3 An auxiliary minimal basis set [3s3p|2s2p] (contracted) for H-F, Na-Cl and Br with ADMM H, He, Li, Be, B, C, N, O, F, Na, Mg, Al, Si, P, S, Cl, Br cFIT4 An auxiliary minimal basis set [7s|3s] for lithium with ADMM Li cFIT4-SR An auxiliary minimal basis set [7s|3s] for lithium with ADMM for solid (short-range) Li cFIT5 An auxiliary minimal basis set [7s1p|3s1p] (cFIT4 with polarization) for lithium int ADMM Li cFIT5-SR An auxiliary minimal basis set [7s1p|3s1p] (cFIT4 with polarization) for lithium with ADMM for solid (short-range) Li cFIT6 An auxiliary minimal basis set [3s3p|2s2p] (contraction of FIT6) for Ge-Br, Sn-I and Pb-At (plus Ca) with ADMM Al, Ge, As, Se, Br, Sn, Sb, Te, I, Pb, Bi, Po, At cFIT7 An auxiliary minimal basis set [3s3p1d|2s2p1d] (cFIT6 with polarization) for Ge-Br, Sn-I and Pb-At (plus Al, K, Ca, Rb, Cs) with ADMM Al, K, Ca, Ge, As, Se, Br, Rb, Sn, Sb, Te, I, Cs, Pb, Bi, Po, At cFIT8 An auxiliary minimal basis set [7s3p1d|3s2p1d] (cFIT7 with polarization) for K, Ca, Rb, Sr, Cs, Ba (plus Ca) with ADMM Al, K, Ca, Rb, Sr, Cs, Ba cFIT9 An auxiliary minimal basis set [4s4p1d|2s2p1d] for Ge-Br, Sn-I and Pb-At (plus Al, K, Ca, Cu, Zn, Ag, Cd, Au, Hg, Rb, Cs, Ba) with ADMM Al, K, Ca, Cu, Zn, Ga, Ge, As, Se, Br, Rb, Sr, Ag, Cd, In, Sn, Sb, Te, I, Cs, Ba, Au, Hg, Tl, Pb, Bi, Po, At ccGRB-D Geometrical Response Basis Valence Set (with polarization Functions from correlation consistent sets) H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn ccGRB-Q Geometrical Response Basis Valence Set (with polarization Functions from correlation consistent sets) H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, At, Rn ccGRB-T Geometrical Response Basis Valence Set (with polarization Functions from correlation consistent sets) H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn cpFIT3 An auxiliary minimal basis set [3s3p1d|2s2p1d] (with polarization and contracted) for H-F, Na-Cl and Br with ADMM H, He, Li, Be, B, C, N, O, F, Na, Mg, Al, Si, P, S, Cl, Br pFIT3 An auxiliary minimal basis set [3s3p1d|3s3p1d] (with polarization) for H-F, Na-Cl and Br with ADMM H, He, Li, Be, B, C, N, O, F, Na, Mg, Al, Si, P, S, Cl, Br"},{"location":"developers/library_content/#pseudopotentials","title":"Pseudopotentials","text":"Name Description Atoms ALL All-electron pseudopotentials (UZH) H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr GTH-BLYP GTH pseudopotentials, optimized for BLYP. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Mo, Ru, Rh, Pd, Ag, In, Sb, Te, I, Xe, Cs, Ba, Ce, Gd, W, Au, Pb, Bi GTH-BP GTH pseudopotentials, optimized for BP. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Zr, Ru, Te, Cs, Au GTH-GGA GTH pseudopotentials, optimized for PBE (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn GTH-HCTH120 GTH pseudopotentials, optimized for HCTH. H, C, N, O, F, P, Ar GTH-HCTH407 GTH pseudopotentials, optimized for HCTH. H, C, N, O GTH-HYB GTH pseudopotentials, optimized for PBE0 (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn GTH-LDA GTH pseudopotentials, optimized for PADE. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn, Ac, Th, Pa, U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr GTH-MGGA GTH pseudopotentials, optimized for SCAN (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn GTH-OLYP GTH pseudopotentials, optimized for OLYP. H, B, C, N, O, F, P, S, Cl GTH-PADE GTH pseudopotentials, optimized for PADE. H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn, Ac, Th, Pa, U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr GTH-PBE GTH pseudopotentials, optimized for PBE (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn GTH-PBE-AcLnPP1 GTH pseudopotentials to explore Lanthanide and Actinide chemistry in complex environments, optimized for PBE. La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Ac, Th, Pa, U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr GTH-PBE-LnPP2 Norm-Conserving pseudopotential 4f-in-Core Optimized for Trivalent Lanthanides Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu GTH-PBE0 GTH pseudopotentials, optimized for PBE0 (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn GTH-SCAN GTH pseudopotentials, optimized for SCAN (UZH). H, He, Li, Be, B, C, N, O, F, Ne, Na, Mg, Al, Si, P, S, Cl, Ar, K, Ca, Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, Ga, Ge, As, Se, Br, Kr, Rb, Sr, Y, Zr, Nb, Mo, Tc, Ru, Rh, Pd, Ag, Cd, In, Sn, Sb, Te, I, Xe, Cs, Ba, La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu, Hf, Ta, W, Re, Os, Ir, Pt, Au, Hg, Tl, Pb, Bi, Po, At, Rn"},{"location":"developers/library_file_format/","title":"The <code>library.h5</code> file format","text":"<p>Info</p> <p>A library file is in the HDF5 format, which divide the data in groups (i.e., \"folders\") and datasets (i.e., \"files\"), the latter being array of data. Groups and datasets can have attributes.</p> <p>The basis set library root contains at least two main (storage) groups: <code>basis_sets</code> and <code>pseudopotentials</code>. They are detailed below.</p>"},{"location":"developers/library_file_format/#the-basis_sets-group","title":"The <code>basis_sets</code> group","text":"<p>This group contains one subgroup per basis set (a <code>basis set</code> group), for which the name is the basis set name. In each <code>basis set</code> group, there is one subgroup for each atom (a <code>atomic bs</code> group). Finally, in that <code>atomic bs</code> subgroup, there is one <code>atomic bs variant</code> group for each variant. Thus, the following structure is valid:</p> <pre><code>*\n|\n+- basis_sets/         # `basis_sets` group\n   |\n   +- SZV-MOLOPT-GTH/  # a `basis set` group\n   |  |\n   |  +- C/            # an `atomic bs` group\n   |  |  |\n   |  |  +- q4/        # an `atomic bs variant` group (see below)\n   |  |\n   |  +- H/\n   |  |  |\n   |  |  +- q1/\n   |  |\n   |  +- ...\n   |\n   +- DZVP-MOLOPT-GTH/\n      |\n      +- C/\n      |  |\n      |  +- q4/\n      |\n      +- H/\n      |  |\n      |  +- q1/\n      |\n      +- ...\n</code></pre> <p>Each <code>atomic bs variant</code> group is composed of the following datasets, which are all mandatory:</p> Name Shape Attributes Info <code>info</code> <code>(2,)</code> --- contains <code>(len(names), len(contractions))</code> <code>names</code> <code>(n,)</code> --- contains <code>n=len(names)</code> names <code>contraction_{i}_info</code> <code>(4+n,)</code> <code>nshell</code> [mandatory] contains <code>(principle_n, l_min, l_max, nfunc, nshell[0], ..., nshell[n-1])</code> with <code>n=attrs[nshell]</code> <code>contraction_{i}_exp_coefs</code> <code>(nfunc,1+sum(nshell))</code> --- contains exponents in <code>[:, 0]</code> and coefficients in <code>[:, 1:]</code> <p>The two last datasets are repeated with <code>i=[0:len(contractions)]</code>.</p> <p>Thus, the following structure, e.g., is valid:</p> <pre><code>*\n|\n+ basis_sets/TZVP-GTH/C/q4/   # contains two contractions\n  |\n  +- info                     # contains (2, 2)\n  +- names                    # contains (TZVP-GTH-q4, TZVP-GTH)\n  +- contraction_0_info       # contains (2, 0, 1, 5, 3, 3)\n  |                           # and has attribute nshell=2\n  +- contraction_0_exp_coefs  # of shape (5, 7)\n  +- contraction_1_info       # contains (3, 2, 2, 1, 1)\n  |                           # and has attribute nshell=1\n  +- contraction_1_exp_coefs  # of shape (1, 2)\n</code></pre>"},{"location":"developers/library_file_format/#the-pseudopotentials-group","title":"The <code>pseudopotentials</code> group","text":"<p>Again, this group contains one subgroup per pseudopotential familly (a <code>pp family</code> group), which name is the family name. In each <code>pp family</code> group, there is one subgroup for each basis set (a <code>atomic pp</code> group). Finally, in that <code>atomic pp</code> subgroup, there is one <code>atomic pp variant</code> group for each variant.</p> <p>Thus, the following structure is valid:</p> <pre><code>*\n|\n+- pseudopotentials/   # the `pseudopotentials` group\n   |\n   +- GTH-BLYP/        # a `pp family group`\n   |  |\n   |  +- C/            # an `atomic pp` group\n   |  |  |\n   |  |  +- q4/        # an `atomic pp variant` group (see below)\n   |  |\n   |  +- H/\n   |  |  |\n   |  |  +- q1/\n   |  |\n   |  +- ...\n   |\n   +- GTH-PBE/\n      |\n      +- C/\n      |  |\n      |  +- q4/\n      |\n      +- ...\n</code></pre> <p>Each <code>atomic pp variant</code> group is composed of the following datasets, which are all mandatory:</p> Name Shape Attributes Info <code>info</code> <code>(3+n,)</code> <code>nelec</code> [mandatory] contains <code>(len(names), len(lcoefs), len(nlprojectors), nelec[0], ... nelec[n-1])</code> with <code>n=attrs[nelec]</code> <code>names</code> <code>(n,)</code> --- contains <code>n=len(names)</code> names <code>local_radius_coefs</code> <code>(1+n,)</code> --- contains <code>(lradius, lcoef[0],..., lcoefs[n-1])</code> with <code>n=len(lcoefs)</code> <code>nlprojector_{i}_radius_coefs</code> <code>(1+n,)</code> <code>nfunc</code> [mandatory] contains <code>(nlradius, nlcoefs[triu(n)[0]], ..., nlcoefs[triu(n)[n-1]])</code> with <code>n=attrs[nfunc]</code> and <code>triu(N)</code> gives the list of the upper triangular indices of a square matrix of size <code>N</code>. <p>The last dataset is repeated with <code>i=[0:len(nlprojectors)]</code>.</p> <p>The following structure, e.g., is valid:</p> <pre><code>*\n|\n+- pseudopotentials/GTH-BLYP/Ne/q8/\n   |\n   +- info                        # contains (2, 2, 2, 2, 6)\n   |                              # and has attribute nelec=2\n   +- names                       # contains (GTH-BLYP-q8, GTH-BLYP)\n   +- local_radius_coefs          # of shape (3,)\n   +- nlprojector_0_radius_coefs  # of shape (4,)\n   |                              # and has attribute nfunc=2\n   +- nlprojector_1_radius_coefs  # of shape (2,)\n                                  # and has attribute nfunc=1\n</code></pre>"},{"location":"developers/library_file_format/#metadata","title":"Metadata","text":"<p>The file may have the <code>date_build</code> attribute, indicating when it was created.</p> <p>Each <code>basis set</code> and <code>pp familly</code> group might also have the following attributes:</p> Name Type Description <code>description</code> <code>str</code> Description of the data <code>references</code> <code>array</code> One-dimensional array of URLs to reference papers (DOI) or sources. <code>tags</code> <code>array</code> One-dimensional array of tags <p>Each <code>atomic bs variant</code> and <code>atomic pp variant</code> may present a <code>source</code> attribute which indicate the URL to the source of this variant.</p> <p>Those attributes are optional.</p>"},{"location":"users/api/","title":"REST API reference","text":"<p>Info</p> <p>A public version is available at <code>https://cp2k-basis.pierrebeaujean.net/api/</code>.</p>"},{"location":"users/api/#preamble","title":"Preamble","text":""},{"location":"users/api/#request","title":"Request","text":"<p>This API can be used to retrieve two types (<code>&lt;type&gt;</code>) of data, either basis sets (<code>basis</code>) or pseudopotentials (<code>pseudopotentials</code>). Each of them has a name (<code>&lt;name&gt;</code>).</p> <p>Options are added as query string: <code>/api/example?option1=value&amp;option2=value</code>.</p> <p>All routes are addressed by <code>GET</code> requests.</p>"},{"location":"users/api/#on-the-elements-option","title":"On the <code>elements</code> option","text":"<p>Every time the option <code>elements</code> can be used,</p> <ul> <li>you can use a list of comma separated atomic symbols, e.g., <code>C,H,N,O</code>,</li> <li>but also ranges, e.g., <code>H,C-O</code>, and</li> <li>Z numbers can be used instead of symbols, e,g., <code>H,6-8</code>.</li> </ul> <p>Elements are limited to Z \u2264 103, i.e., hydrogen to Lawrencium. If you want to perform calculations outside this range, you probably have other problems on your plate than finding a basis set ;)</p>"},{"location":"users/api/#response-format","title":"Response format","text":"<p>The response is in JSON, and always contains two main fields:</p> <pre><code>{\n  \"query\": {\n    \"type\": \"TYPE\",\n    (...)\n  },\n  \"result\": {\n    (...)\n  }\n}\n</code></pre> <p><code>query</code> contains the request, to which <code>result</code> is the answer. In the following, fields will be detailed using the syntax for object attributes in JS, e.g., <code>query.type</code>. </p>"},{"location":"users/api/#routes","title":"Routes","text":""},{"location":"users/api/#apidata","title":"<code>/api/data</code>","text":"<p>Get, for basis sets and pseudopotentials, which elements are defined, and for each element, which basis set/pseudopotentials are defined. There is no option.</p> <p>Output:</p> Field Type Description <code>query.type</code> string Always <code>ALL</code> <code>result.basis_sets</code> dictionary Contains three fields: <code>build_date</code>, which give the date at which the library was built, <code>elements</code>, which lists elements available for a given basis set, and <code>tags</code>, which lists the tags for each basis set. <code>result.pseudopotentials</code> dictionary Contains three fields: <code>build_date</code>, which give the date at which the library was built, <code>elements</code>, which lists elements available for a given pseudopotential, and <code>tags</code>, which lists the tags for each pseudopotential. <p>Example:</p> <pre><code>curl https://cp2k-basis.pierrebeaujean.net/api/data\n</code></pre> <pre><code>{\n  \"query\": {\n    \"type\": \"ALL\"\n  },\n  \"result\": {\n    \"basis_sets\": {\n      \"build_date\": \"2022-12-16T18:09:03.513403\",\n      \"elements\": {\n        \"DZVP-MOLOPT-GTH\": [\n          \"C\",\n          \"H\",\n          (...)\n        ],\n        (...)\n      },\n      \"tags\": {\n        \"DZVP-MOLOPT-GTH\": [\n          \"molopt\",\n          \"gth\"\n        ],\n        (...)\n      }\n    },\n    \"pseudopotentials\": {\n      \"build_date\": \"2022-12-16T18:09:03.513403\",\n      \"elements\": {\n        \"GTH-BLYP\": [\n          \"B\",\n          \"Be\", \n          (...)\n        ]\n      },\n      \"tags\": {\n          (...)\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"users/api/#apinames","title":"<code>/api/names</code>","text":"<p>List all available basis set and pseudopotential names available, eventually for a set of elements.</p> <p>Options:</p> Option Argument Description <code>elements</code> String Restrict the output to a subset of elements. <code>bs_name</code> String Restrict the output to a subset of basis sets containing the given name (case insensitive). <code>bs_tag</code> String Restrict the output to a subset of basis sets having the given tag. <code>pp_name</code> String Restrict the output to a subset of pseudopotentials containing the given name (case insensitive). <code>pp_tag</code> String Restrict the output to a subset of pseudopotentials having the given tag. <p>Available tags are listed there.</p> <p>Output:</p> Field Type Description <code>query.type</code> string Always <code>ALL</code> <code>query.elements</code> list of string Value of the <code>elements</code> option, if provided <code>result.basis_sets</code> list of string List of basis set names available <code>result.pseudopotentials</code> list of string List of pseudopotential names available <p>Example:</p> <pre><code>curl 'https://cp2k-basis.pierrebeaujean.net/api/names?elements=Ti&amp;pp_name=PBE&amp;bs_tag=SR'\n</code></pre> <pre><code>{\n  \"query\": {\n    \"elements\": [\n      \"Ti\"\n    ],\n    \"type\": \"ALL\"\n  },\n  \"result\": {\n    \"basis_sets\": [\n      \"DZVP-MOLOPT-SR-GTH\",\n      \"SZV-MOLOPT-SR-GTH\",\n      \"TZV2P-MOLOPT-SR-GTH\",\n      \"TZVP-MOLOPT-SR-GTH\"\n    ],\n    \"pseudopotentials\": [\n      \"GTH-PBE\",\n      \"GTH-PBE0\"\n    ]\n  }\n}\n</code></pre>"},{"location":"users/api/#apitypenamedata","title":"<code>/api/&lt;type&gt;/&lt;name&gt;/data</code>","text":"<p>Obtain data in the CP2K format.</p> <p>Options:</p> Option Argument Description <code>elements</code> String Restrict the output to a subset of elements. If some elements are not defined for this basis set/pseudopotential, a 404 is raised. <code>header</code> Boolean Add an header to <code>result.data</code> (default is true) <p>Output:</p> Field Type Description <code>query.type</code> string <code>BASIS_SET</code> or <code>PSEUDOPOTENTIAL</code> <code>query.name</code> string The name you requested <code>query.elements</code> list of string Value of the <code>elements</code> option, if provided <code>result.data</code> string The resulting basis set or pseudopotential, in CP2K format <code>result.elements</code> list of string Elements for which there is data (matches the option <code>elements</code> if set) <code>result.variants</code> dictionary For each element, dictionary containing all variants and the corresponding name to be used for such variant <code>result.metadata</code> dictionary Dictionary of metadata about this pseudopotential/basis set. See below for content. <p>Example:</p> <pre><code>curl https://cp2k-basis.pierrebeaujean.net/api/basis/SZV-MOLOPT-SR-GTH/data?elements=Rh\n</code></pre> <pre><code>{\n  \"query\": {\n    \"elements\": [\n      \"Rh\"\n    ],\n    \"name\": \"SZV-MOLOPT-SR-GTH\",\n    \"type\": \"BASIS_SET\"\n  },\n  \"result\": {\n    \"data\": \"# URL: http://127.0.0.1:5000/api/basis/SZV-MOLOPT-SR-GTH/data?elements=Rh\\n# BUILD: 16/12/2022 @ 19:38\\n# FETCHED: 19/12/2022 @ 14:36\\n# ---\\n# Rh [12s6p6d|2s1p1d]\\n# SOURCE: https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/BASIS_MOLOPT#L1244\\nRh  SZV-MOLOPT-SR-GTH SZV-MOLOPT-SR-GTH-q17\\n1\\n2 0 2 6 2 1 1\\n  3.157817444361  0.760084070950  0.239207051701 -0.336193318541 -0.176446839307\\n  2.683291075925 -0.255650224037 -0.091067207483  0.373953992584  0.261743358411\\n  1.140786095845 -1.025626679377 -0.520689753906  0.300684698668  0.174717739794\\n  0.492081007160 -0.234415477939 -0.274976137245  0.141457244144  0.188746290944\\n  0.192543904978  0.046321838032  0.534686741279  0.007751787318  0.112894420897\\n  0.066486620394  0.135748106274  0.896548625743  0.000117823467  0.021703317232\\n# Rh [6s6p6d|1s1p1d]\\n# SOURCE: https://github.com/cp2k/cp2k/raw/786bc82ff9ded3e1f761cba6d8e25c3c9fe19bb1/data/BASIS_MOLOPT#L1262\\nRh  SZV-MOLOPT-SR-GTH-q9\\n1\\n2 0 2 6 1 1 1\\n  3.902721449032  0.016652865171 -0.008699428728 -0.112417659954\\n  1.999830271997 -0.133395648426  0.046572987907  0.348017742874\\n  0.879887627395  0.373099930807 -0.153463590375  0.381775351795\\n  0.363794442257  0.298777744612 -0.052550610965  0.335875585916\\n  0.140096726529 -0.924610879301  0.949493319446  0.146687236468\\n  0.042562039477 -0.455102584336  0.423881871378  0.013082339937\\n\",\n    \"elements\": [\n      \"Rh\"\n    ],\n    \"metadata\": {\n      \"description\": \"A single zeta valence MOLOPT basis set, for solids (short-range) and GTH pseudopotentials\",\n      \"tags\": [\n        \"MOLOPT\",\n        \"SR\",\n        \"GTH\"\n      ],\n      \"references\": [\n        \"https://dx.doi.org/10.1063/1.2770708\",\n        \"https://doi.org/10.1039/B508541A\",\n        \"https://github.com/cp2k/cp2k-data\"\n      ]\n    },\n    \"variants\": {\n      \"Rh\": {\n        \"q17\": \"SZV-MOLOPT-SR-GTH-q17\",\n        \"q9\": \"SZV-MOLOPT-SR-GTH-q9\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"users/api/#apitypenamemetadata","title":"<code>/api/&lt;type&gt;/&lt;name&gt;/metadata</code>","text":"<p>Obtain metadata about a basis set or pseudopotential. There is no option.</p> <p>Output:</p> Field Type Description <code>query.type</code> string <code>BASIS_SET</code> or <code>PSEUDOPOTENTIAL</code> <code>query.name</code> string The name you requested <code>result.elements</code> list of string Elements for which the basis set/pseudopotential are defined <code>result.description</code> string Small description. <code>result.references</code> list of string List of URL to articles or repositories <code>result.tags</code> list of string Kind of the basis set/pseudopotential <p>Example:</p> <pre><code>curl https://cp2k-basis.pierrebeaujean.net/api/pseudopotentials/GTH-BLYP/metadata\n</code></pre> <pre><code>{\n  \"query\": {\n    \"name\": \"GTH-BLYP\",\n    \"type\": \"PSEUDOPOTENTIAL\"\n  },\n  \"result\": {\n    \"description\": \"GTH pseudopotentials, optimized for BLYP.\",\n    \"elements\": [\n      \"Ag\",\n      \"Al\",\n      (...)\n    ],\n    \"tags\": [\n      \"GTH\"\n    ],\n    \"references\": [\n      \"https://dx.doi.org/10.1103/PhysRevB.54.1703\",\n      \"https://dx.doi.org/10.1103/PhysRevB.58.3641\",\n      \"https://dx.doi.org/10.1007/s00214-005-0655-y\",\n      \"https://github.com/cp2k/cp2k-data\"\n    ]\n  }\n}\n</code></pre>"},{"location":"users/basis_sets_and_pseudos/","title":"On basis sets and GTH pseudopotentials in CP2K","text":""},{"location":"users/basis_sets_and_pseudos/#basis-sets","title":"Basis sets","text":"<p>Solving the Schr\u00f6dinger equation generally resort to the use of the LCAO (linear combination of atomic orbitals) approximation. For computational reasons, while STO (slater-type orbitals, \\(\\propto e^{r}\\)) should be used, GTO (gaussian type orbitals, \\(\\propto e^{r^2}\\)) are preferred.</p> <p>In CP2K (as in other quantum chemistry programs), basis functions (i.e., atomic orbitals) are defined as:</p> \\[\\psi_{i,\\ell m} (\\mathbf r) = R_{i,\\ell}(\\mathbf r)\\,Y_{\\ell m}(\\theta,\\phi),\\] <p>where \\(R(r)\\) is the radial part, and \\(Y_{\\ell m}\\) is a spherical harmonic (\\(\\ell\\) is the angular momentum and \\(m\\in[-\\ell,\\ell]\\)) for the angular part. A weighted sum of primitives (Gaussian functions) is used for this part:</p> \\[R_{i,\\ell}(r) = r^\\ell\\,\\sum_{j} c_{ij}\\,e^{-\\alpha_j\\,r^2},\\] <p>where \\(\\alpha_{j}\\) is the exponent, while \\(c_{ij}\\) is the corresponding contraction coefficient.  The two numbers defines the primitive \\(j\\) in the basis function \\(\\psi_i\\).</p> <p>Thus, a basis sets is a library of contractions for each shell (s-type [\\(\\ell=0\\)], p-type [\\(\\ell=1\\)], d-type [\\(\\ell=2\\)], etc) of a given atom, containing the definition of the primitives (so a list of exponents and their corresponding contraction coefficients). Since the radial part is the same for each possible orbital in a shell (i.e., each possible value of \\(m\\)), this is sufficient to define a basis set.</p> <p>But basis function can be grouped!</p> <p>Some basis functions (even with different \\(\\ell\\)) may be grouped to share the same exponent. </p> <p>This is the case, e.g., in the (in)famous STO-3G (3 gaussians for each basis function) in which so-called \"SP\" basis functions are found, defined by using a common exponent but different contraction coefficient for each of the 3 gaussians defining the actual s-type and p-type basis function.</p> <p>MOLOPT basis sets (see below) are built on this principle.</p> <p>Multiple-\\(\\zeta\\) basis sets use \\(\\zeta\\) basis functions for each atomic orbitals in the atom.  For example, double-\\(\\zeta\\) basis sets use two basis function for each atomic orbital (e.g., a total of 10 basis function for the carbon). They may be grouped to share the same exponent, or not.</p> <p>On top of that, two other kind of basis function might be added:</p> <ol> <li>polarization functions, which have a larger angular momentum than those of the ground state of the atom (e.g., d-type basis functions for the carbon), and</li> <li>diffuse functions, which have very small exponents (corresponding to very \"large\" Gaussian functions).</li> </ol> <p>Thus, the number of basis function for a given atom is very different from one basis set to the other.</p> <p>Note</p> <p>One way to ease the communication is to report, for each shell, the number of primitives (uncontracted set) in the form <code>(uncontracted set)</code>, and the number of basis functions (contracted set) in the form <code>[contracted set]</code>.</p> <p>For example, in a double-zeta basis set defined by 3 gaussian per basis function, the result for carbn would be <code>(12s,6p)</code> and <code>[3s,2p]</code>.  The form <code>[12s6p|3s2p]</code>, combining the two is also found.</p> <p>However, for reasons that will become clear in the next section, CP2K does not only use all-electron basis sets.</p>"},{"location":"users/basis_sets_and_pseudos/#gth-pseudopotentials","title":"GTH pseudopotentials","text":"<p>Info</p> <p>For the latest CP2K review, see 10.1063/5.0007045 (May 2020). The GPW method is described, e.g., here.</p> <p>Indeed, CP2K is able use an auxiliary plane wave (PW) basis set to perform its calculation with the GPW (and GAPW) method. To perform a such calculation, one needs to include all possible PW below a given threshold.  In fact, increasing this threshold will monotonously improve the quality of the result (and the length of the calculation!). However, area where the electron density is rapidly changing requires PW with small wavelengths/high energy to be well described (i.e., large Fourier components), so high threshold, which would make the calculation impossible in practice. In practice, area where such changes are important are mostly located near the nuclei, \"thanks\" its ionic potential \\(V(r) = - \\frac{Z}{r}\\).</p> <p>Hopefully, core and valence shell are generally well (spatially and energetically) separated, and core electrons are relatively unperturbed by the surrounding (chemically inert).</p> <p>So the idea behind pseudopotentials is to replace the effect of the nuclei and the core electrons (which are considered frozen) by an effective potential (below a given threshold \\(r_c\\)), and the valence electrons basis functions by ones with fewer nodes (since they do not need to be orthogonal to the, now removed, valence orbital), but with the same behavior outside the core region (for \\(r &gt; r_c\\)).</p> Derivation of a pseudopotential <p>Say one has a set of  (orthogonal) core states \\(\\{|\\chi_n\\rangle\\}\\) (with their corresponding eigenvalue \\(\\{E_n\\}\\)). The goal is to construct a pseudo-state \\(|\\phi\\rangle\\) for a valence state \\(|\\psi\\rangle\\) (with its corresponding eigenvalue \\(E\\)), in the form:</p> \\[|\\psi\\rangle = |\\phi\\rangle + \\sum_n a_n |\\chi_n\\rangle.\\] <p>Since the core and valence state must be orthogonal, \\(\\langle \\chi_m | \\psi \\rangle = 0 = \\langle \\chi_m | \\phi \\rangle + a_m\\), so that</p> \\[|\\psi\\rangle = |\\phi\\rangle - \\sum_n |\\chi_n\\rangle \\langle \\chi_n | \\phi\\rangle.\\] <p>Substituting in Schr\u00f6dinger equation for \\(|\\psi\\rangle\\) gives</p> \\[\\hat H |\\phi\\rangle + \\sum_n (E-E_n) |\\chi_n\\rangle \\langle \\chi_n | \\phi\\rangle = E|\\phi\\rangle.\\] <p>The pseudo-state thus obeys \\([\\hat H + \\hat V_{n\\ell}]\\, |\\phi\\rangle = E\\,|\\phi\\rangle\\) with:</p> \\[\\hat V_{n\\ell} = \\sum_{n\\ell} (E-E_{n\\ell})\\,|\\chi_{n\\ell}\\rangle \\langle \\chi_{n\\ell} |.\\] <p>where the energy of \\(|\\phi\\rangle\\) is the same as the one of \\(|\\psi\\rangle\\), thanks to the pseudopotential \\(\\hat V_{n\\ell}\\). This extra potential depends on the quantum numbers \\(n\\) and \\(\\ell\\) due to its spherical symmetry. Furthermore, since \\(E &gt; E_{n\\ell}\\), it is a repulsive potenial.</p> <p>In practice, pseudopotential expressions are separated into a fully nonlocal form, thanks to the Kleinman-Bylander Transformation (see 10.1103/PhysRevLett.48.1425). Latter on, Goedecker, Teter and Hutter (GTH, see 10.1103/PhysRevB.54.1703) derived expressions those two parts which are suited for real and Fourier space integration and only requires a few adjustable parameters (in blue):</p> \\[\\hat V_{PP} = \\hat V_{loc} +  \\sum_{\\ell}^{\\textcolor{blue}{\\ell_{max}}} \\hat V_{nl,\\ell},\\] <p>with</p> \\[V_{loc}(r) = -\\frac{Z'}{r}\\,\\text{erf}\\left[\\frac{\\bar r}{\\sqrt 2}\\right] + \\exp\\left[-\\frac{\\bar r^2}{2}\\right] \\sum_{i=1}^4 \\textcolor{blue}{C_i}\\,\\bar r^{2i-2}, \\text{ with } \\bar r = \\frac{r}{\\textcolor{blue}{r_c}},\\] <p>and </p> \\[V_{nl,\\ell} = \\sum_{ij}^{\\textcolor{blue}{N}} \\textcolor{blue}{h_{\\ell,ij}} \\,|p_{\\ell,i}\\rangle \\langle p_{\\ell,j}|, \\text{ with } p_{\\ell,i}(r) = N_{\\ell,i}(r)\\,\\exp\\left[-\\frac{\\bar r^2}{2}\\right] \\text{ and } \\bar r = \\frac{r}{\\textcolor{blue}{r_{nl,\\ell}}}.\\] <p>In the former, \\(Z'\\) is the ionic charge (i.e., the charge of the nucleus minus the one of the core electrons), while in the latter, \\(N_\\ell(r)\\) is a combination of spherical harmonic multiplied by a \\(\\ell\\)-dependent radial function.</p> <p>All the parameters in blue, together with the number of core electrons in each shell, define a GTH pseudopotential in CP2K (see, e.g., 10.1007/s00214-005-0655-y). In particular, they are given as a local part plus a set of nonlinear projectors.</p> <p>Note</p> <p>It is totally possible, for a given atom, to have pseudopotentials with a different number of core electrons embeded in the potential: while a small number of core electrons ensure a good transferability (but lengthen the calculation), a large number results in a smoother potential.</p>"},{"location":"users/basis_sets_and_pseudos/#pairing-gth-pseudopotentials-with-basis-sets","title":"Pairing GTH pseudopotentials with basis sets","text":"<p>Warning</p> <p>In practice, the number electron is dictated by the pseudopotential (which lists the number of valence electrons in each shell). CP2K will blindly use whatever basis set you give, since it has no way to check the information on the basis set side (not even the names, which are merely conventions).</p> <p>From the previous paragraph, it appears that one has to pair a given pseudopotential with a correctly defined basis set, that has been designed with the correct amount of core electron removed and that contains smoother (pseudo-) basis functions. Names of pseudopotentials and basis sets help to achieve this association:</p> <ul> <li> <p>GTH pseudopotential are generally named <code>GTH-&lt;XFC&gt;</code>, where <code>&lt;XCF&gt;</code> is the name of a XC-functional.    It is thus strongly suggested to use them together with the XCF in question.</p> <p>For a given atom, such potentials are nicknamed <code>GTH-&lt;XFC&gt;-q&lt;N&gt;</code>, where <code>&lt;N&gt;</code> is the number of valence electrons considered while building the potential. For example, a pseudopotential for carbon is nicknamed <code>GTH-BLYP-q4</code>, indicate that this pseudopotential was designed with BLYP, and that was built using 4 valence electrons (so it embedded a total of 2 core electrons).</p> </li> <li> <p>Basis sets are generally named <code>&lt;XZ&gt;-&lt;NAME&gt;-&lt;XCF&gt;-GTH</code> or <code>&lt;XZ&gt;-GTH-&lt;XCF&gt;</code> (though this is definitely not an absolute rule!), where <code>&lt;XZ&gt;</code> describe the content of the basis set (e.g., <code>DZV</code> for double zeta, <code>TZVP</code> for triple zeta with extra polarization, etc), <code>&lt;NAME&gt;</code> is the name of the family (e.g., <code>MOLOPT</code>) and <code>&lt;XCF&gt;</code> is the name of the XCF used to optimize the basis set.    The <code>&lt;XCF&gt;</code> may not be present in the name: for example, <code>TZVP-MOLOPT-GTH</code> should work with all XCF, while <code>TZVP-MOLOPT-PBE-GTH</code> was specifically designed with PBE.    The latter probably gives better results and should (probably) be preferred.</p> <p>Again, for each atom, a suffix <code>-q&lt;N&gt;</code> is added, indicated how much valence electrons were considered while building this basis set. For example, for carbon, the nickname <code>DZVP-MOLOPT-GTH-q4</code> indicates that this is a double-zeta basis set (plus polarization functions) of the <code>MOLOPT</code> family, designed to work with GTH pseudopotentials embedding 2 core electrons.</p> </li> </ul> <p>Where are the basis sets and GTH pseudopotentials?</p> <p>When running a CP2K calculation, you have to provide two files, containing the basis set(s) and pseudopotential(s) used in your calculation:</p> <pre><code>&amp;DFT\n    BASIS_SET_FILE_NAME  BASIS_SET\n    POTENTIAL_FILE_NAME  GTH_POTENTIALS\n&amp;END DFT\n</code></pre> <p>Basis sets and pseudopotentials are scattered across different file in the CP2K <code>data</code> folder. However, the web interface of this project proposes an easier way to build your own taylor-made <code>BASIS_SET</code> and <code>GTH_POTENTIALS</code> files. This is equivalent, since the data are obtained from the same source and just presented with a shiny interface ;)</p> <p>If you are interested, the format of those two files is described here</p>"},{"location":"users/basis_sets_and_pseudos/#working-with-all-electron-basis-sets","title":"Working with all-electron basis sets","text":"<p>Info</p> <p>The GAPW method is introduced, e.g., here or in 10.1007/s002140050523.</p> <p>There also exists a special pseudopotential, <code>ALL</code>, which should be used for all-electron calculations. This is the pseudopotential of choice for GAPW calculations.  It can be used with your usual all-electron basis sets (such as STO-3G, e.g., found in the BSE). A curated list is available in the <code>EMSL_BASIS_SETS</code> file.</p> <p>Specially designed basis sets were also derived (found, e.g., in the <code>ALL_BASIS_SETS</code> file), which contains <code>ALL</code> in their name or ends by <code>-ae</code>. The <code>-q&lt;N&gt;</code> number, if it exists (it is generally omitted), should be equal to the atomic number.</p>"},{"location":"users/webserver/","title":"How to use the web interface?","text":"<p>Info</p> <p>If you are not familiar with the concept of basis set and pseudopotentials, check out this introduction.</p> <p>As usual with quantum chemistry calculations, to run CP2K, you need a geometry and a method. For the latter, if you want to use the GPW method (and, to some extent, the GAPW method), you will need to pick a basis set and a matching pseudopotential, which is the goal of this web interface.</p>"},{"location":"users/webserver/#example","title":"Example","text":"<p>Say you want to optimize the water molecule. In particular, your input looks like:</p> <pre><code>&amp;FORCE_EVAL\n    METHOD QS\n    &amp;SUBSYS\n        &amp;CELL\n          ABC 12.4138 12.4138 12.4138\n        &amp;END CELL\n        &amp;COORD\n          O      12.235322       1.376642      10.869880\n          H      12.415139       2.233125      11.257611\n          H      11.922476       1.573799       9.986994\n        &amp;END COORD\n        &amp;KIND H\n          BASIS_SET ??  ! &lt;- pick one\n          POTENTIAL ??  ! &lt;- pick one\n        &amp;END KIND\n        &amp;KIND O\n          BASIS_SET ??  ! &lt;- pick one\n          POTENTIAL ??  ! &lt;- pick one\n        &amp;END KIND\n    &amp;END SUBSYS\n    &amp;DFT\n        BASIS_SET_FILE_NAME  BASIS_SET      ! &lt;- should contain your basis set(s)\n        POTENTIAL_FILE_NAME  GTH_POTENTIALS ! &lt;- should contain your pseudo(s)\n        &amp;XC\n          &amp;XC_FUNCTIONAL ??  ! &lt;- pick one\n          &amp;END XC_FUNCTIONAL\n        &amp;END XC\n        # (...)\n    &amp;END DFT\n&amp;END FORCE_EVAL\n# (...)\n</code></pre>"},{"location":"users/webserver/#if-you-already-know-the-method","title":"If you already know the method","text":"<p>If you already know which basis set and pseudopotential you want to use, say <code>DZVP-MOLOPT-GTH</code> with <code>GTH-BLYP</code> (and the BLYP XC-functional), select them in the corresponding lists:</p> <p></p> <p>You can use the search bar in the top of each list to quickly access the basis set or pseudopotential you are looking for:</p> <p></p> <p>It is also possible to sort the basis set and pseudopotentials per tag, with the dropdown on the right. The following tags are available:</p> Tag Description <code>GTH</code> GTH basis sets or pseudopotential. Opposite of <code>ALL</code> <code>ALL</code> All-electron basis set or (pseudo)potential. Opposite of <code>GTH</code> <code>MOLOPT</code> MOLOPT basis sets <code>SR</code> Short-range/confined basis sets, better for solids <p>In the periodic table below, the red borders indicate that the basis set is available for these atoms, while the blue borders indicates that the pseudopotential is available:</p> <p></p> <p>This combination is thus available for H and O (but also for C-F and Si-Cl).</p>"},{"location":"users/webserver/#if-you-dont-know-the-method","title":"If you don't know the method","text":"<p>If you don't know yet which basis set and potential you will use, you can already select the atoms in your calculation:</p> <p></p> <p>If you do so, the list of basis sets and pseudopotentials update so that it only show the ones that are available for this selection. So you can pick whatever combination you want in these possibilities!</p>"},{"location":"users/webserver/#and-then","title":"And then?","text":"<p>When you have selected a matching triplet of atoms, basis set and pseudopotential, the panels on the right should update with the result.</p> <p>In particular, the first panel should be copied in a <code>BASIS_SET</code> file that will be used by your calculation, while the second should be copied in a <code>GTH_PSEUDOPOTENTIALS</code> file:</p> <p></p> <p>Info</p> <p>These panels also report when the library of basis sets and pseudo was built, as a comment. To ease your life latter (check for errors), it might be useful to keep it. It also gives the address to the API call that generates this output, if you want.</p> <p>If you use a recent brower, you can use the copy button to perform the copy  .</p> <p>The information button,  opens an extra area with some info on the basis set or pseudopotential, in particular the references you need to cite in your articles:</p> <p></p> <p>Finally, a last panel gives you the <code>&amp;KIND</code> sections that you can just copy-paste in your input:</p> <p></p> <p>Don't forget to update the <code>&amp;XC_FUNCTIONAL</code> section... Et voil\u00e0!</p>"},{"location":"users/webserver/#auxiliary-basis-sets","title":"Auxiliary basis sets","text":"<p>Info</p> <p>Check out 10.1021/ct1002225 for a description of the ADMM method, or this presentation.</p> <p>If you need to use an <code>AUX_FIT</code> basis set, toggle the corresponding switch and select your basis:</p> <p></p> <p>Both the \"basis set\" and \"input file\" panels update to reflect those changes:</p> <p></p> <p>Note</p> <p>The tag filter and search bar have no effect on the list of available auxiliary basis sets.</p>"},{"location":"users/webserver/#peculiarity","title":"Peculiarity","text":"<p>The web interface tries to ensure that the same number of core electron is used for the basis set and pseudopotential, thanks to the <code>-q&lt;N&gt;</code> nickname that is given for each atom. This has two (interesting!) side effects:</p> <ol> <li> <p>For some elements, you have multiple possibilities (called \"variant\" by the web interface), indicated by comments:</p> <p></p> <p>In this case, you can safely replace <code>-q3</code> (all-electron) by <code>-q1</code> (2 core electron embedded in the pseudopotential) for both the basis set and the potential, since they are both available (see the two panels in the top). It will, of course, impact the results.</p> </li> <li> <p>If you select combination that are incompatible (e.g., the all-electron pseudopotential <code>ALL</code> with a pseudo basis set), it will be indicated:</p> <p></p> <p>You should thus reflect on your choices since running such calculation would be a mistake \ud83d\ude09</p> </li> </ol>"},{"location":"users/webserver/#api","title":"API","text":"<p>If you want to interface this service with others, there is also an API available. This API actually feeds the web interface, so it should be easy for you to provide a similar service if you want to.</p>"}]}